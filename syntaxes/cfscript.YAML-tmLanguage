# [PackageDev] target_format: plist, ext: plist
name: CFML Script
scopeName: source.cfml.script

patterns:
- include: '#main'

repository:
  main:
    patterns:
    - include: '#keywords-top-level'
    - include: '#statements'

  keywords-top-level:
    patterns:
    - name: meta.import.cfml
      begin: '\bimport\b'
      beginCaptures:
        '0': {name: keyword.control.import.cfml}
      end: '(?=\n|;)'
      patterns:
      - include: '#string'
      - match: '[_$a-zA-Z][$\w]*'
        name: variable.other.readwrite.cfml
      - match: '\*'
        name: constant.other.cfml

  statements:
    patterns:
    - include: '#component'
    - include: '#conditional'
    - name: meta.block.cfml
      begin: '\{'
      beginCaptures:
        '0': {name: punctuation.definition.block.begin.cfml}
      end: '\}'
      endCaptures:
        '0': {name: punctuation.definition.block.end.cfml}
      patterns:
      - include: '#statements'
    - include: '#expressions'

  conditional:
    patterns:
    - name: meta.switch.cfml
      begin: '\bswitch\b'
      beginCaptures:
        '0': {name: keyword.control.switch.cfml}
      end: '\}'
      endCaptures:
        '0': {name: meta.block.cfml punctuation.definition.block.end.cfml}
      patterns:
      - include: '#round-brackets'
      - name: meta.block.cfml
        begin: '\{'
        beginCaptures:
          '0': {name: punctuation.definition.block.begin.cfml}
        end: '(?=\})'
        patterns:
        - begin: ':'
          end: '(?=(\bcase\b|\bdefault\b|\}))'
          patterns:
          - include: '#statements'
        - match: \b(case|default)\b
          name: keyword.control.switch.cfml
        - include: '#expressions'

    - name: meta.do-while.cfml
      begin: '\bdo\b'
      beginCaptures:
        '0': {name: keyword.control.loop.cfml}
      end: '\)'
      endCaptures:
        '0': {name: meta.group.cfml punctuation.definition.group.end.cfml}
      patterns:
      - name: meta.block.cfml
        begin: '\{'
        beginCaptures:
          '0': {name: punctuation.definition.block.begin.cfml}
        end: '\}'
        endCaptures:
          '0': {name: punctuation.definition.block.end.cfml}
        patterns:
        - include: '#statements'
      - match: \bwhile\b
        name: keyword.control.loop.cfml
      - name: meta.group.cfml
        begin: '\('
        beginCaptures:
          '0': {name: punctuation.definition.group.begin.cfml}
        end: '(?=\))'
        patterns:
        - include: '#expressions'

    - name: meta.for.cfml
      begin: \bfor\b
      beginCaptures:
        '0': {name: keyword.control.loop.cfml}
      end: (?:(\})|(?=[^\(\{\}\s]))
      endCaptures:
        '1': {name: meta.block.cfml punctuation.definition.block.end.cfml}
      patterns:
        - include: '#parens-block-scope'
    - name: meta.while.cfml
      begin: \bwhile\b
      beginCaptures:
        '0': {name: keyword.control.loop.cfml}
      end: (?:(\})|(?=[^\(\{\}\s]))
      endCaptures:
        '1': {name: meta.block.cfml punctuation.definition.block.end.cfml}
      patterns:
        - include: '#parens-block-scope'
    - name: meta.conditional.cfml
      begin: \b(else\s+if|if)\b
      beginCaptures:
        '0': {name: keyword.control.conditional.cfml}
      end: (?:(\})|(?=[^\(\{\}\s]))
      endCaptures:
        '1': {name: meta.block.cfml punctuation.definition.block.end.cfml}
      patterns:
        - include: '#parens-block-scope'
    - name: meta.conditional.cfml
      begin: \belse\b
      beginCaptures:
        '0': {name: keyword.control.conditional.cfml}
      end: (?:(\})|(?=[^\{\}\s]))
      endCaptures:
        '1': {name: meta.block.cfml punctuation.definition.block.end.cfml}
      patterns:
        - include: '#block-scope'
    - name: meta.try.cfml
      begin: \btry\b
      beginCaptures:
        '0': {name: keyword.control.trycatch.cfml}
      end: (?:(\})|(?=[^\{\}\s]))
      endCaptures:
        '1': {name: meta.block.cfml punctuation.definition.block.end.cfml}
      patterns:
        - include: '#block-scope'
    - name: meta.finally.cfml
      begin: \bfinally\b
      beginCaptures:
        '0': {name: keyword.control.trycatch.cfml}
      end: (?:(\})|(?=[^\{\}\s]))
      endCaptures:
        '1': {name: meta.block.cfml punctuation.definition.block.end.cfml}
      patterns:
        - include: '#block-scope'
    - name: meta.catch.cfml
      begin: \bcatch\b
      beginCaptures:
        '0': {name: keyword.control.trycatch.cfml}
      end: (?:(\})|(?=[^\(\{\}\s]))
      endCaptures:
        '1': {name: meta.block.cfml punctuation.definition.block.end.cfml}
      patterns:
        - include: '#parens-block-scope'

  parens-block-scope:
    patterns:
    - name: meta.group.cfml
      begin: '\('
      beginCaptures:
        '0': {name: punctuation.definition.group.begin.cfml}
      end: '\)'
      endCaptures:
        '0': {name: punctuation.definition.group.end.cfml}
      patterns:
      - include: '#expressions'
    - include: '#block-scope'

  block-scope:
    name: meta.block.cfml
    begin: '\{'
    beginCaptures:
      '0': {name: punctuation.definition.block.begin.cfml}
    end: (?=\})
    patterns:
    - include: '#statements'

  expressions:
    patterns:
    - include: '#comments'
    - include: '#string'
    - include: '#constructor'
    - include: '#operators'
    - include: '#keywords'
    - include: '#constants'
    - include: '#named-function'
    - include: '#anonymous-function'
    - include: '#tag-in-script'
    - include: '#struct-literal'
    - include: '#brackets'
    - include: '#number'
    - include: '#tag-in-script-cf'
    - include: '#call'
    - include: '#variable'
    - include: '#punctuation'

  comments:
    patterns:
    - name: comment.block.documentation.cfml
      begin: /\*\*(?!/)
      beginCaptures:
        '0': {name: punctuation.definition.comment.cfml}
      end: \*/
      endCaptures:
        '0': {name: punctuation.definition.comment.cfml}
    - name: comment.block.cfml
      begin: /\*
      beginCaptures:
        '0': {name: punctuation.definition.comment.cfml}
      end: \*/
      endCaptures:
        '0': {name: punctuation.definition.comment.cfml}
    - name: comment.line.double-slash.cfml
      begin: //
      beginCaptures:
        '0': {name: punctuation.definition.comment.cfml}
      end: \n

  string:
    patterns:
    - include: '#string-quoted-single'
    - include: '#string-quoted-double'

  string-quoted-double:
    name: string.quoted.double.cfml
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.cfml}
    end: '(")(?!")'
    endCaptures:
      '1': {name: punctuation.definition.string.end.cfml}
    patterns:
    - name: constant.character.escape.quote.cfml
      match: '""'
    - include: '#hash-delimiters'

  string-quoted-single:
    name: string.quoted.single.cfml
    begin: "'"
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.cfml}
    end: "(')(?!')"
    endCaptures:
      '1': {name: punctuation.definition.string.end.cfml}
    patterns:
    - name: constant.character.escape.quote.cfml
      match: "''"
    - include: '#hash-delimiters'

  hash-delimiters:
    patterns:
    - name: constant.character.escape.hash.cfml
      match: '##'
    - contentName: source.cfml.script
      begin: '#'
      beginCaptures:
        '0': {name: constant.character.hash.cfml.start}
      end: '#'
      endCaptures:
        '0': {name: constant.character.hash.cfml.end}
      patterns:
      - include: '#expressions'

  constructor:
    name: meta.instance.constructor.cfml
    begin: \b(new)\s+
    beginCaptures:
      '1': {name: keyword.operator.new.cfml}
    end: (\))|(?=[^_$\w.\(\)])
    endCaptures:
      '1': {name: meta.function-call.method.arguments.cfml punctuation.definition.group.end.cfml}
    patterns:
    - match: \b[_$a-zA-Z][$\w]*(?=\()
      name: entity.name.class.cfml
    - name: meta.function-call.method.arguments.cfml
      begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.group.begin.cfml}
      end: '(?=\))'
      patterns:
      - match: ','
        name: punctuation.separator.argument.function.cfml
      - begin: '\b([_$a-zA-Z][$\w]*)\s*(=)(?!=)'
        beginCaptures:
          '1': {name: entity.other.method-parameter.cfml}
          '2': {name: keyword.operator.assignment.cfml}
        end: '(?=[,\)])'
        patterns:
        - include: '#expressions'
      - include: '#expressions'

  operators:
    patterns:
    - match: '!(?!=)'
      name: keyword.operator.logical.cfml
    - match: \b(?i:not)\b
      name: keyword.operator.logical.cfml
    - match: '--|\+\+'
      name: keyword.operator.arithmetic.cfml
    - match: \bnew\b
      name: keyword.operator.new.cfml
    - begin: \b(in|void)\b
      beginCaptures:
        '0': {name: keyword.operator.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: '&&|\|\|'
      beginCaptures:
        '0': {name: keyword.operator.logical.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: '\b(?i:(and|or|xor|eqv|imp))\b'
      beginCaptures:
        '0': {name: keyword.operator.logical.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: =(?!=)
      beginCaptures:
        '0': {name: keyword.operator.assignment.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: \b(?i:(greater|less|than|equal\s+to|does|contains|equal|eq|neq|lt|lte|le|gt|gte|ge|and|is))\b
      beginCaptures:
        '0': {name: keyword.operator.decision.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: '%=|&=|\*=|\+=|-=|/='
      beginCaptures:
        '0': {name: keyword.operator.assignment.augmented.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: '&'
      beginCaptures:
        '0': {name: keyword.operator.concat.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: '<=|>=|<|>'
      beginCaptures:
        '0': {name: keyword.operator.relational.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: '==|!='
      beginCaptures:
        '0': {name: keyword.operator.comparison.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: '/|%|\*|\+|-'
      beginCaptures:
        '0': {name: keyword.operator.arithmetic.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'
    - begin: '\?|:'
      beginCaptures:
        '0': {name: keyword.operator.ternary.cfml}
      end: '(?<=\})|(?=[^\s\{])'
      patterns:
      - include: '#struct-literal'

  component:
    patterns:
    - begin: (?i)^(?=\s*(component)\b)
      end: '\}'
      endCaptures:
        '0': {name: meta.class.body.cfml punctuation.definition.block.end.cfml}
      patterns:
      - name: meta.class.declaration.cfml
        begin: \b(component)\b
        beginCaptures:
          '1': {name: storage.type.class.cfml}
        end: (?=\{)
        patterns:
        - include: '#comments'
        - include: '#component-attributes'
      - name: meta.class.body.cfml
        begin: '\{'
        beginCaptures:
          '0': {name: punctuation.definition.block.begin.cfml}
        end: (?=})
        patterns:
          - include: '#statements'
    - begin: (?i)^(?=\s*(interface)\b)
      end: '\}'
      endCaptures:
        '0': {name: meta.interface.body.cfml punctuation.definition.block.end.cfml}
      patterns:
      - name: meta.interface.declaration.cfml
        begin: \b(interface)\b
        beginCaptures:
          '1': {name: storage.type.interface.cfml}
        end: (?=\{)
        patterns:
        - include: '#comments'
        - include: '#component-attributes'
      - name: meta.interface.body.cfml
        begin: '\{'
        beginCaptures:
          '0': {name: punctuation.definition.block.begin.cfml}
        end: (?=})
        patterns:
          - include: '#statements'

  component-attributes:
    patterns:
    - name: meta.class.inheritance.cfml
      begin: (?i)\b(extends)\s*(=)\s*
      beginCaptures:
        '1': {name: storage.modifier.extends.cfml}
        '2': {name: punctuation.separator.key-value.cfml}
      end: ((")([a-zA-Z0-9:.]+)?("))|((')([a-zA-Z0-9:.]+)?('))|([a-zA-Z0-9:.]+)|(?=[^a-zA-Z0-9:.])
      endCaptures:
        '1': {name: string.quoted.double.cfml}
        '2': {name: punctuation.definition.string.begin.cfml}
        '3': {name: entity.other.inherited-class.cfml}
        '4': {name: punctuation.definition.string.end.cfml}
        '5': {name: string.quoted.single.cfml}
        '6': {name: punctuation.definition.string.begin.cfml}
        '7': {name: entity.other.inherited-class.cfml}
        '8': {name: punctuation.definition.string.end.cfml}
        '9': {name: string.unquoted.cfml entity.other.inherited-class.cfml}
    - include: '#tag-generic-attribute'

  keywords:
    patterns:
    - match: \b(throw|rethrow)\b(?!\()
      name: keyword.control.trycatch.cfml
    - match: (?<!\.)\b(break|continue)\b
      name: keyword.control.loop.cfml
    - match: (?<!\.)\b(return|abort)\b
      name: keyword.control.flow.cfml
    - match: \bvar\b
      name: storage.type.cfml

  constants:
    patterns:
    - match: \btrue\b
      name: constant.language.boolean.true.cfml
    - match: \bfalse\b
      name: constant.language.boolean.false.cfml
    - match: \bnull\b
      name: constant.language.null.cfml

  named-function:
    patterns:
    - begin: |-
        (?x)
        (?:
          (?:
            (?i:\b(private|package|public|remote)\s+)?
            (?i:\b
              (void)\s+
              |
              (any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid)\s+
              |
              ([A-Za-z0-9_\.$]+)\s+
              |
              ([A-Za-z0-9_\.$]+)(\[)(\])?\s+
            )?
          )
        )
        (?i:(function))
        \s+
        (?:
          (init)
          |
          ([_$a-zA-Z][$\w]*)
        )\b
      beginCaptures:
        '0': {name: meta.function.declaration.cfml}
        '1': {name: storage.modifier.cfml}
        '2': {name: storage.type.return-type.void.cfml}
        '3': {name: storage.type.return-type.primitive.cfml}
        '4': {name: storage.type.return-type.object.cfml}
        '5': {name: storage.type.return-type.object.array.cfml}
        '6': {name: meta.brackets.cfml punctuation.definition.brackets.begin.cfml}
        '7': {name: meta.brackets.cfml punctuation.definition.brackets.end.cfml}
        '8': {name: storage.type.function.cfml}
        '9': {name: entity.name.function.constructor.cfml}
        '10': {name: entity.name.function.cfml}
      end: '\}'
      endCaptures:
        '0': {name: meta.function.body.cfml punctuation.definition.block.end.cfml}
      patterns:
      - include: '#function-declaration-parameters'
      - name: meta.function.body.cfml
        begin: '\{'
        beginCaptures:
          '0': {name: punctuation.definition.block.begin.cfml}
        end: '(?=\})'
        patterns:
        - include: '#statements'

    - begin: '(?=(([_$a-zA-Z][$\w]*)\s*(\.)\s*)+([_$a-zA-Z][$\w]*)\s*(=)\s*(\s*\bfunction\b|\s*\([^\(]*?\)\s*=>\s*\{))'
      end: '\}'
      endCaptures:
        '0': {name: meta.function.body.cfml punctuation.definition.block.end.cfml}
      patterns:
      - name: meta.function.body.cfml
        begin: '\{'
        beginCaptures:
          '0': {name: punctuation.definition.block.begin.cfml}
        end: '(?=\})'
        patterns:
        - include: '#statements'
      - include: '#arrow-function-declaration'
      - include: '#function-declaration'
      - name: meta.function.declaration.cfml
        begin: '(?=[_$a-zA-Z][$\w]*\s*\.)'
        end: '\.'
        endCaptures:
          '0': {name: punctuation.accessor.cfml}
        patterns:
        - include: '#cfml-scopes'
        - match: '[_$a-zA-Z][$\w]*'
          name: support.class.cfml
      - name: meta.function.declaration.cfml
        begin: '(?=[_$a-zA-Z][$\w]*\s*(=)\s*)'
        end: '\s*(=)\s*'
        endCaptures:
          '1': {name: keyword.operator.assignment.cfml}
        patterns:
        - match: '[_$a-zA-Z][$\w]*'
          name: meta.property.cfml entity.name.function.cfml

    # duplicate for the sake of concise arrow functions
    - begin: '(?=(([_$a-zA-Z][$\w]*)\s*(\.)\s*)+([_$a-zA-Z][$\w]*)\s*(=)\s*\([^\(]*?\)\s*=>)'
      end: '(?=[);}\],\n])'
      patterns:
      - include: '#arrow-function-declaration'
      - name: meta.function.declaration.cfml
        begin: '(?=[_$a-zA-Z][$\w]*\s*\.)'
        end: '\.'
        endCaptures:
          '0': {name: punctuation.accessor.cfml}
        patterns:
        - include: '#cfml-scopes'
        - match: '[_$a-zA-Z][$\w]*'
          name: support.class.cfml
      - name: meta.function.declaration.cfml
        begin: '(?=[_$a-zA-Z][$\w]*\s*(=)\s*)'
        end: '\s*(=)\s*'
        endCaptures:
          '1': {name: keyword.operator.assignment.cfml}
        patterns:
        - match: '[_$a-zA-Z][$\w]*'
          name: meta.property.cfml entity.name.function.cfml

    - begin: '(?=([_$a-zA-Z][$\w]*)\s*(=)\s*(\s*\bfunction\b|\s*\([^\(]*?\)\s*=>\s*\{))'
      end: '\}'
      endCaptures:
        '0': {name: meta.function.body.cfml punctuation.definition.block.end.cfml}
      patterns:
      - name: meta.function.body.cfml
        begin: '\{'
        beginCaptures:
          '0': {name: punctuation.definition.block.begin.cfml}
        end: '(?=\})'
        patterns:
        - include: '#statements'
      - include: '#arrow-function-declaration'
      - include: '#function-declaration'
      - name: meta.function.declaration.cfml
        begin: '(?=[_$a-zA-Z][$\w]*\s*(=)\s*)'
        end: '\s*(=)\s*'
        endCaptures:
          '1': {name: keyword.operator.assignment.cfml}
        patterns:
        - match: '[A-Z][_$\dA-Z]*'
          name: variable.other.constant.cfml entity.name.function.cfml
        - match: '[_$a-zA-Z][$\w]*'
          name: variable.other.readwrite.cfml entity.name.function.cfml

    # duplicate for concise arrow functions
    - begin: '(?=([_$a-zA-Z][$\w]*)\s*(=)\s*\([^\(]*?\)\s*=>)'
      end: '(?=[);}\],\n])'
      patterns:
      - include: '#arrow-function-declaration'
      - name: meta.function.declaration.cfml
        begin: '(?=[_$a-zA-Z][$\w]*\s*(=)\s*)'
        end: '\s*(=)\s*'
        endCaptures:
          '1': {name: keyword.operator.assignment.cfml}
        patterns:
        - match: '[A-Z][_$\dA-Z]*'
          name: variable.other.constant.cfml entity.name.function.cfml
        - match: '[_$a-zA-Z][$\w]*'
          name: variable.other.readwrite.cfml entity.name.function.cfml

    - begin: '(?=\s*\bfunction\b\s+[_$a-zA-Z][$\w]*)'
      end: '\}'
      endCaptures:
        '0': {name: meta.function.body.cfml punctuation.definition.block.end.cfml}
      patterns:
      - name: meta.function.body.cfml
        begin: '\{'
        beginCaptures:
          '0': {name: punctuation.definition.block.begin.cfml}
        end: '(?=\})'
        patterns:
        - include: '#statements'
      - include: '#function-declaration'

  anonymous-function:
    patterns:
    - begin: '(?=(\s*\bfunction\b|\s*\([^\(]*?\)\s*=>\s*\{))'
      end: '\}'
      endCaptures:
        '0': {name: meta.function.body.cfml punctuation.definition.block.end.cfml}
      patterns:
      - name: meta.function.body.cfml
        begin: '\{'
        beginCaptures:
          '0': {name: punctuation.definition.block.begin.cfml}
        end: '(?=\})'
        patterns:
        - include: '#statements'
      - match: \b(function)\b\s*
        captures:
          '0': {name: meta.function.anonymous.cfml meta.function.declaration.cfml}
          '1': {name: storage.type.function.cfml}
      - match: \s*(=>)\s*
        captures:
          '0': {name: meta.function.anonymous.cfml meta.function.declaration.cfml}
          '1': {name: storage.type.function.arrow.cfml}
      - match: '[_$a-zA-Z][$\w]*'
        name: meta.function.anonymous.cfml meta.function.declaration.cfml entity.name.function.cfml
      - name: meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml
        begin: \(
        beginCaptures:
          '0': {name: punctuation.definition.parameters.begin.cfml}
        end: '(?=\))'
        patterns:
        - include: '#function-parameter'
      - name: meta.function.anonymous.cfml meta.function.declaration.cfml
        begin: '\)'
        beginCaptures:
          '0': {name: meta.function.parameters.cfml punctuation.definition.parameters.end.cfml}
        end: (?=(\{|=>))
        patterns:
        - include: '#tag-generic-attribute'

    # concise arrow function
    - begin: '(?=\s*\([^\(]*?\)\s*=>)'
      end: '(?=[);}\],\n])'
      patterns:
      - begin: \s*(=>)\s*
        beginCaptures:
          '0': {name: meta.function.anonymous.cfml meta.function.declaration.cfml}
          '1': {name: storage.type.function.arrow.cfml}
        end: (?=[);}\],\n])
        contentName: 'meta.function.body.cfml'
        patterns:
        - include: '#expressions'
      - name: meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml
        begin: \(
        beginCaptures:
          '0': {name: punctuation.definition.parameters.begin.cfml}
        end: \)
        endCaptures:
          '0': {name: punctuation.definition.parameters.end.cfml}
        patterns:
        - include: '#function-parameter'

  function-declaration:
    begin: (?=\s*\bfunction\b)
    end: (?=\{)
    patterns:
    - match: \b(function)\b\s*
      captures:
        '0': {name: meta.function.declaration.cfml}
        '1': {name: storage.type.function.cfml}
    - match: '[_$a-zA-Z][$\w]*'
      name: meta.function.declaration.cfml entity.name.function.cfml
    - include: '#function-declaration-parameters'

  function-declaration-parameters:
    patterns:
    - name: meta.function.declaration.cfml meta.function.parameters.cfml
      begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.parameters.begin.cfml}
      end: '(?=\))'
      patterns:
      - include: '#function-parameter'
    - name: meta.function.declaration.cfml
      begin: '\)'
      beginCaptures:
        '0': {name: meta.function.parameters.cfml punctuation.definition.parameters.end.cfml}
      end: (?=(\{|=>))
      patterns:
      - include: '#tag-generic-attribute'

  arrow-function-declaration:
    patterns:
    - name: meta.function.declaration.cfml
      begin: '(?=\([^\(]*?\)\s*=>\s*\{)'
      end: '(=>)\s*'
      endCaptures:
        '1': {name: storage.type.function.arrow.cfml}
      patterns:
      - include: '#arrow-function-declaration-parameters'
    # concise arrow function
    - begin: (?=\([^\(]*?\)\s*=>)
      end: '(?=[);}\],\n])'
      patterns:
      - name: meta.function.declaration.cfml
        begin: (?=\()
        end: '(?=(=>))'
        patterns:
        - include: '#arrow-function-declaration-parameters'
      - begin: '(=>)\s*'
        beginCaptures:
          '0': {name: meta.function.declaration.cfml}
          '1': {name: storage.type.function.arrow.cfml}
        end: (?=[);}\],\n])
        contentName: 'meta.function.body.cfml'
        patterns:
        - include: '#expressions'

  arrow-function-declaration-parameters:
    name: meta.function.parameters.cfml
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.parameters.begin.cfml}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.parameters.end.cfml}
    patterns:
    - include: '#function-parameter'

  function-parameter:
    patterns:
    - match: (?i:required)
      name: keyword.other.required.argument.cfml
    - match: \b(?i:(function|string|date|struct|array|void|binary|numeric|boolean|query|xml|uuid|any))\b
      name: storage.type.cfml
    - match: '[_$a-zA-Z][$\w]*'
      name: variable.parameter.function.cfml
    - match: ','
      name: punctuation.separator.parameter.function.cfml
    - name: meta.parameter.optional.cfml
      begin: '='
      beginCaptures:
        '0': {name: keyword.operator.assignment.cfml}
      end: (?=[,)])
      patterns:
      - include: '#expressions'
    - include: '#comments'

  struct-literal:
    name: meta.struct-literal.cfml
    begin: '\{'
    beginCaptures:
      '0': {name: punctuation.definition.block.begin.cfml}
    end: '\}'
    endCaptures:
      '0': {name: punctuation.definition.block.end.cfml}
    patterns:
    - include: '#comments'
    - begin: (?=(\'.*\'|\".*\"|[_$a-zA-Z][$\w]*)\s*(:|=)\s*(\bfunction\b|\([^\(]*?\)\s*=>\s*\{))
      end: '\}'
      endCaptures:
        '0': {name: meta.function.body.cfml punctuation.definition.block.end.cfml}
      patterns:
      - include: '#struct-literal-function-keys'
      - begin: '(?=\s*\bfunction\b)'
        end: '(?=\})'
        patterns:
        - include: '#function-declaration'
        - name: meta.function.body.cfml
          begin: '\{'
          beginCaptures:
            '0': {name: punctuation.definition.block.begin.cfml}
          end: '(?=\})'
          patterns:
          - include: '#statements'
      - begin: '(?=\s*\([^\(]*?\)\s*=>\s*\{)'
        end: '(?=\})'
        patterns:
        - include: '#arrow-function-declaration'
        - name: meta.function.body.cfml
          begin: '\{'
          beginCaptures:
            '0': {name: punctuation.definition.block.begin.cfml}
          end: '(?=\})'
          patterns:
          - include: '#statements'
    - begin: (?=(\'.*\'|\".*\"|[_$a-zA-Z][$\w]*)\s*(:|=)\s*|\([^\(]*?\)\s*=>)
      end: '(?=[);}\],\n])'
      patterns:
      - include: '#struct-literal-function-keys'
      - include: '#arrow-function-declaration'
    - name: meta.struct-literal.key.cfml
      begin: "(?=\"|')"
      end: "(?<=\"|')"
      patterns:
      - include: '#string'
    - match: '[_$a-zA-Z][$\w]*'
      name: meta.struct-literal.key.cfml
    - begin: '(:|=)\s*'
      beginCaptures:
        '1': {name: punctuation.separator.key-value.cfml}
      end: '(?=[\},])'
      patterns:
      - include: '#expressions'

  struct-literal-function-keys:
    patterns:
    - name: meta.function.declaration.cfml meta.struct-literal.key.cfml string.quoted.single.cfml
      contentName: entity.name.function.cfml
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.cfml}
      end: "(')(?!')"
      endCaptures:
        '1': {name: punctuation.definition.string.end.cfml}
      patterns:
      - name: constant.character.escape.quote.cfml
        match: "''"
      - include: '#hash-delimiters'
    - name: meta.function.declaration.cfml meta.struct-literal.key.cfml string.quoted.double.cfml
      contentName: entity.name.function.cfml
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.cfml}
      end: '(")(?!")'
      endCaptures:
        '1': {name: punctuation.definition.string.end.cfml}
      patterns:
      - name: constant.character.escape.quote.cfml
        match: '""'
      - include: '#hash-delimiters'
    - match: '[_$a-zA-Z][$\w]*'
      name: meta.function.declaration.cfml meta.struct-literal.key.cfml entity.name.function.cfml
    - match: '(:|=)'
      name: meta.function.declaration.cfml punctuation.separator.key-value.cfml

  brackets:
    patterns:
    - include: '#round-brackets'
    - include: '#square-brackets'

  round-brackets:
    patterns:
    - name: meta.group.cfml
      begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.group.begin.cfml}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.cfml}
      patterns:
      - include: '#expressions'
    - name: invalid.illegal.stray.brace.round.cfml
      match: \)

  square-brackets:
    patterns:
    - name: meta.brackets.cfml
      begin: \[
      beginCaptures:
        '0': {name: punctuation.definition.brackets.begin.cfml}
      end: \]
      endCaptures:
        '0': {name: punctuation.definition.brackets.end.cfml}
      patterns:
      - include: '#expressions'

  number:
    name: constant.numeric.cfml
    match: (?xi)(?:\B[-+])?(?:\b0x[0-9a-f]*|(\B\.[0-9]+|\b[0-9]+(\.[0-9]*)?))

  call:
    patterns:
    - begin: '(?=\b[_$a-zA-Z][$\w]*\s*\()'
      end: '(?<=\))'
      patterns:
      - include: '#support-call'
      - match: ([_$a-zA-Z][$\w]*)\s*(?=\()
        captures:
          '1': {name: meta.function-call.cfml variable.function.cfml}
      - include: '#function-call-params'

    - begin: '(?=[_$a-zA-Z][$\w]*\s*\.\s*[_$a-zA-Z][$\w]*\s*\()'
      end: '(?<=\))'
      patterns:
      - begin: '(?=[_$a-zA-Z][$\w]*\s*\.)'
        end: '\.'
        endCaptures:
          '0': {name: punctuation.accessor.cfml}
        patterns:
        - include: '#cfml-scopes'
        - match: '[_$a-zA-Z][$\w]*'
          name: variable.other.object.cfml
      - match: '\.'
        name: keyword.other.accessor.cfml
      - include: '#method-call'

  method-call:
    patterns:
    - include: '#support-method-call'
    - name: meta.function-call.method.cfml
      begin: '([_$a-zA-Z][$\w]*)\s*(?=\()'
      beginCaptures:
        '1': {name: variable.function.cfml}
      end: '\)'
      endCaptures:
        '0': {name: punctuation.definition.group.end.cfml}
      patterns:
      - name: meta.function-call.method.arguments.cfml
        begin: '\('
        beginCaptures:
          '0': {name: punctuation.definition.group.begin.cfml}
        end: '(?=\))'
        patterns:
        - match: ','
          name: punctuation.separator.argument.function.cfml
        - begin: '\b([_$a-zA-Z][$\w]*)\s*(=)(?!=)'
          beginCaptures:
            '1': {name: entity.other.method-parameter.cfml}
            '2': {name: keyword.operator.assignment.cfml}
          end: (?=[,\)])
          patterns:
          - include: '#expressions'
        - include: '#expressions'

  function-call-params:
    name: meta.function-call.cfml meta.function-call.arguments.cfml
    begin: '\('
    beginCaptures:
      '0': {name: punctuation.definition.group.begin.cfml}
    end: '\)'
    endCaptures:
      '0': {name: punctuation.definition.group.end.cfml}
    patterns:
    - match: ','
      name: punctuation.separator.argument.function.cfml
    - begin: '\b([_$a-zA-Z][$\w]*)\s*(=)(?!=)'
      beginCaptures:
        '1': {name: entity.other.function-parameter.cfml}
        '2': {name: keyword.operator.assignment.cfml}
      end: (?=[,\)])
      patterns:
      - include: '#expressions'
    - include: '#expressions'

  cfml-scopes:
    patterns:
    - match: \b(?i:super)\b
      name: variable.language.super.cfml
    - match: \b(?i:this)\b
      name: variable.language.this.cfml
    - match: \b(?i:thread)\b(?=[\[.])
      name: variable.language.scope.cfml
    - match: |-
        (?x)
          \b(?i:(
          application|arguments|attributes|caller|cgi|client|cookie|flash|form|
          local|request|server|session|thistag|url|variables|self|argumentcollection
        ))\b
      name: variable.language.scope.cfml

  variable:
    patterns:
    - include: '#cfml-scopes'
    - match: '[_$a-zA-Z][$\w]*(?=\s*[\[\.])'
      name: variable.other.struct.cfml
    - match: \b[A-Z][_$\dA-Z]*\b
      name: variable.other.constant.cfml
    - match: '[_$a-zA-Z][$\w]*'
      name: variable.other.readwrite.cfml

  punctuation:
    patterns:
    - begin: \.
      beginCaptures:
        '0': {name: punctuation.accessor.cfml}
      end: '(?<=\))|(?=\n)|(\})|(;)|(?:([A-Z][_$\dA-Z]*)|([_$a-zA-Z][$\w]*))(?=\n|[^$\w])(?!(\s*\(|\s*=\s*(function\b|\([^\(]*?\)\s*=>)))'
      endCaptures:
        '1': {name: meta.function.body.cfml punctuation.definition.block.end.cfml}
        '2': {name: punctuation.terminator.statement.cfml}
        '3': {name: meta.property.constant.cfml}
        '4': {name: meta.property.cfml}
      # All of these matches use set (or effectively a set via the final
      # include/match/pop construct) instead of push so that we escape this
      # accessor state once a match has been made. Otherwise identifiers
      # following method definitions or method calls will be scoped as
      # properties.
      patterns:
      - begin: '(?=([_$a-zA-Z][$\w]*)\s*(=)\s*(function\b|\([^\(]*?\)\s*=>\s*\{))'
        end: '(?=\})'
        patterns:
        - name: meta.function.body.cfml
          begin: '\{'
          beginCaptures:
            '0': {name: punctuation.definition.block.begin.cfml}
          end: '(?=\})'
          patterns:
          - include: '#statements'
        - match: ([_$a-zA-Z][$\w]*)\s*(=)\s*
          captures:
            '0': {name: meta.function.declaration.cfml}
            '1': {name: meta.property.cfml entity.name.function.cfml}
            '2': {name: keyword.operator.assignment.cfml}
        - include: '#function-declaration'
        - include: '#arrow-function-declaration'
      - begin: '(?=([_$a-zA-Z][$\w]*)\s*(=)\s*\([^\(]*?\)\s*=>)'
        end: '(?=[);}\],\n])'
        patterns:
        - match: ([_$a-zA-Z][$\w]*)\s*(=)\s*
          captures:
            '0': {name: meta.function.declaration.cfml}
            '1': {name: meta.property.cfml entity.name.function.cfml}
            '2': {name: keyword.operator.assignment.cfml}
        - include: '#arrow-function-declaration'
      - include: '#method-call'
    - match: \;
      name: punctuation.terminator.statement.cfml
    - match: ","
      name: meta.delimiter.comma.cfml

  support-call:
    patterns:
    - name: meta.support.function-call.cfml meta.support.function-call.createcomponent.cfml
      contentName: meta.support.function-call.arguments.cfml
      begin: (?i)\b(createobject)(\()(?=(?:\s*type\s*=)?\s*["']component["']\s*,)
      beginCaptures:
        '1': {name: support.function.cfml}
        '2': {name: meta.support.function-call.arguments.cfml punctuation.definition.group.begin.cfml}
      end: \)
      endCaptures:
        '0': {name: meta.support.function-call.arguments.cfml punctuation.definition.group.end.cfml}
      patterns:
      - include: '#expressions'
    - name: meta.support.function-call.cfml meta.support.function-call.createjavaobject.cfml
      contentName: meta.support.function-call.arguments.cfml
      begin: (?i)\b(createobject)(\()(?=(?:\s*type\s*=)?\s*["']java["']\s*,)
      beginCaptures:
        '1': {name: support.function.cfml}
        '2': {name: meta.support.function-call.arguments.cfml punctuation.definition.group.begin.cfml}
      end: \)
      endCaptures:
        '0': {name: meta.support.function-call.arguments.cfml punctuation.definition.group.end.cfml}
      patterns:
      - include: '#expressions'
    - name: meta.support.function-call.cfml
      contentName: meta.support.function-call.arguments.cfml
      begin: |-
        (?x)\b
        (?i:
            (array(?:append|avg|clear|contains|containsnocase|delete|deleteat|deletenocase|each
            |every|filter|find|findall|findallnocase|findnocase|first|indexexists|insertat|isdefined
            |isempty|last|len|map|max|median|merge|mid|min|new|prepend|reduce|resize|reverse
            |set|slice|some|sort|sum|swap|tolist|tostruct)|cache(?:clear|count|delete|get|getall
            |getallids|getdefaultcachename|getmetadata|getproperties|getsession|idexists|keyexists
            |put|regionexists|regionnew|regionremove|remove|removeall|setproperties)|component(?:cacheclear
            |cachelist|info)|create(?:date|datetime|dynamicproxy|guid|object|odbcdate|odbcdatetime
            |odbctime|time|timespan|uniqueid|uuid)|date(?:add|compare|convert|diff|format|part
            |timeformat)|entity(?:delete|load|loadbyexample|loadbypk|merge|namearray|namelist
            |new|reload|save|toquery)|get(?:applicationmetadata|applicationsettings|authuser
            |basetagdata|basetaglist|basetemplatepath|builtinfunction|canonicalpath|classpath
            |clientvariableslist|componentmetadata|contextroot|cpuusage|currentcontext|currenttemplatepath
            |directoryfrompath|encoding|exception|filefrompath|fileinfo|freespace|functioncalledname
            |functiondata|functionkeywords|functionlist|gatewayhelper|httprequestdata|httptimestring
            |k2serverdoccount|k2serverdoccountlimit|locale|localedisplayname|localhostip|luceeid
            |memoryusage|metadata|metricdata|numericdate|pagecontext|printerinfo|printerlist
            |profilesections|profilestring|readableimageformats|safehtml|soaprequest|soaprequestheader
            |soapresponse|soapresponseheader|systemfreememory|systemtotalmemory|tagdata|taglist
            |tempdirectory|tempfile|templatepath|tickcount|timezone|timezoneinfo|token|totalspace
            |userroles|variable|vfsmetadata|writeableimageformats)|image(?:addborder|blur|clearrect
            |copy|createcaptcha|crop|drawarc|drawbeveledrect|drawcubiccurve|drawimage|drawline
            |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|drawtext
            |filter|filtercolormap|filtercurves|filterkernel|filterwarpgrid|flip|fonts|formats
            |getblob|getbufferedimage|getexifmetadata|getexiftag|getheight|getiptcmetadata|getiptctag
            |getmetadata|getwidth|grayscale|info|makecolortransparent|maketranslucent|negative
            |new|overlay|paste|read|readbase64|resize|rotate|rotatedrawingaxis|scaletofit|setantialiasing
            |setbackgroundcolor|setdrawingalpha|setdrawingcolor|setdrawingstroke|setdrawingtransparency
            |sharpen|shear|sheardrawingaxis|translate|translatedrawingaxis|write|writebase64
            |xordrawingmode)|is(?:array|binary|boolean|closure|customfunction|date|ddx|debugmode
            |defined|empty|fileobject|image|imagefile|instanceof|ipinrange|ipv6|json|leapyear
            |localhost|notmap|null|numeric|numericdate|object|pdffile|pdfobject|query|safehtml
            |simplevalue|soaprequest|spreadsheetfile|spreadsheetobject|struct|userinanyrole|userinrole
            |userloggedin|valid|validoauthaccesstoken|videofile|wddx|xml|xmlattribute|xmldoc
            |xmlelem|xmlnode|xmlroot|zipfile)|list(?:append|avg|changedelims|compact|contains
            |containsnocase|deleteat|each|every|filter|find|findnocase|first|getat|indexexists
            |insertat|itemtrim|last|len|map|prepend|qualify|reduce|removeduplicates|rest|setat
            |some|sort|toarray|trim|valuecount|valuecountnocase)|object(?:equals|load|save)|orm(?:clearsession
            |closeallsessions|closesession|evictcollection|evictentity|evictqueries|executequery
            |flush|flushall|getsession|getsessionfactory|index|indexpurge|reload|search|searchoffline)
            |query(?:addcolumn|addrow|columnarray|columncount|columndata|columnexists|columnlist
            |convertforgrid|currentrow|deletecolumn|deleterow|each|every|execute|filter|getcell
            |getrow|map|new|recordcount|reduce|rowdata|setcell|slice|some|sort)|replace(?:list
            |nocase)|spreadsheet(?:addautofilter|addcolumn|addfreezepane|addimage|addinfo|addpagebreaks
            |addrow|addrows|addsplitpane|createsheet|deletecolumn|deletecolumns|deleterow|deleterows
            |formatcell|formatcellrange|formatcolumn|formatcolumns|formatrow|formatrows|getcellcomment
            |getcellformula|getcellvalue|info|mergecells|new|read|readbinary|removesheet|setactivesheet
            |setactivesheetnumber|setcellcomment|setcellformula|setcellvalue|setcolumnwidth|setfooter
            |setheader|setrowheight|shiftcolumns|shiftrows|write)|store(?:addacl|getacl|getmetadata
            |setacl|setmetadata)|struct(?:append|clear|copy|count|delete|each|every|filter|find
            |findkey|findvalue|get|insert|isempty|keyarray|keyexists|keylist|keytranslate|map
            |new|reduce|some|sort|update)|to(?:base64|binary|numeric|script|string)|transaction(?:commit
            |rollback|setsavepoint)|url(?:decode|encode|encodedformat|sessionformat)|xml(?:childpos
            |elemnew|format|getnodetype|new|parse|search|transform|validate)|abs|acos|addsoaprequestheader
            |addsoapresponseheader|ajaxlink|ajaxonload|applicationstarttime|applicationstop|array
            |asc|asin|atn|beat|binarydecode|binaryencode|bitand|bitmaskclear|bitmaskread|bitmaskset
            |bitnot|bitor|bitshln|bitshrn|bitxor|booleanformat|callstackdump|callstackget|canonicalize
            |ceiling|cfusion_decrypt|cfusion_encrypt|charsetdecode|charsetencode|chr|cjustify
            |collectioneach|collectionevery|collectionfilter|collectionmap|collectionreduce|collectionsome
            |compare|comparenocase|compress|contractpath|cos|csrfgeneratetoken|csrfverifytoken
            |ctcacheclear|ctcachelist|datasourceflushmetacache|day|dayofweek|dayofweekasstring
            |dayofweekshortasstring|dayofyear|daysinmonth|daysinyear|de|decimalformat|decodeforhtml
            |decodefromurl|decrementvalue|decrypt|decryptbinary|deleteclientvariable|deserialize
            |deserializejson|deserializexml|directorycopy|directorycreate|directorydelete|directoryexists
            |directorylist|directoryrename|directorysize|dollarformat|dotnettocftype|duplicate
            |each|echo|empty|encodeforcss|encodefordn|encodeforhtml|encodeforhtmlattribute|encodeforjavascript
            |encodeforldap|encodeforurl|encodeforxml|encodeforxmlattribute|encodeforxpath|encrypt
            |encryptbinary|esapidecode|esapiencode|evaluate|exp|expandpath|extract|fileappend
            |fileclose|filecopy|filedelete|fileexists|filegetmimetype|fileiseof|filemove|fileopen
            |fileread|filereadbinary|filereadline|fileseek|filesetaccessmode|filesetattribute
            |filesetlastmodified|fileskipbytes|fileupload|fileuploadall|filewrite|filewriteline
            |find|findnocase|findoneof|firstdayofmonth|fix|floor|formatbasen|generatepbkdfkey
            |generatesecretkey|hash|hash40|hmac|hour|htmlcodeformat|htmleditformat|htmlparse
            |iif|incrementvalue|inputbasen|insert|int|invalidateoauthaccesstoken|invoke|javacast
            |jsstringformat|lcase|left|len|ljustify|location|log|log10|lscurrencyformat|lsdateformat
            |lsdatetimeformat|lsdayofweek|lseurocurrencyformat|lsiscurrency|lsisdate|lsisnumeric
            |lsnumberformat|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber
            |lstimeformat|lsweek|ltrim|max|metaphone|mid|millisecond|min|minute|month|monthasstring
            |monthshortasstring|newline|now|nowserver|nullvalue|numberformat|onapplicationend
            |onapplicationstart|onerror|onmissingmethod|onmissingtemplate|onrequest|onrequestend
            |onrequeststart|onsessionend|onsessionstart|pagepoolclear|pagepoollist|paragraphformat
            |parameterexists|parsedatetime|parsenumber|pi|precisionevaluate|preservesinglequotes
            |quarter|query|quotedvaluelist|rand|randomize|randrange|reescape|refind|refindnocase
            |releasecomobject|rematch|rematchnocase|removecachedquery|removechars|repeatstring
            |replace|rereplace|rereplacenocase|restdeleteapplication|restinitapplication|restsetresponse
            |reverse|right|rjustify|round|rtrim|second|sendgatewaymessage|serialize|serializejson
            |serializexml|sessiongetmetadata|sessioninvalidate|sessionrotate|sessionstarttime
            |setencoding|setlocale|setprofilestring|settimezone|setvariable|sgn|sin|sizeof|sleep
            |soundex|spanexcluding|spanincluding|sqr|sslcertificateinstall|sslcertificatelist
            |stringlen|stripcr|systemcacheclear|systemoutput|tan|threadjoin|threadterminate|throw
            |timeformat|trace|trim|truefalseformat|ucase|ucfirst|unserializejava|val|valuearray
            |valuelist|verifyclient|week|wrap|writebody|writedump|writelog|writeoutput|wsgetallchannels
            |wsgetsubscribers|wspublish|wssendmessage|year|yesnoformat)
          )(\()
      beginCaptures:
        '1': {name: support.function.cfml}
        '2': {name: meta.support.function-call.arguments.cfml punctuation.definition.group.begin.cfml}
      end: \)
      endCaptures:
        '0': {name: meta.support.function-call.arguments.cfml punctuation.definition.group.end.cfml}
      patterns:
      - match: ','
        name: punctuation.separator.argument.function.cfml
      - begin: '\b([_$a-zA-Z][$\w\.]*)\s*(=)(?!=)'
        captures:
          '1': {name: entity.other.function-parameter.cfml}
          '2': {name: keyword.operator.assignment.cfml}
        end: '(?=[,\)])'
        patterns:
        - include: '#expressions'
      - include: '#expressions'

  support-method-call:
    name: meta.support.function-call.member.cfml
    contentName: meta.support.function-call.member.arguments.cfml
    begin: |-
      (?x)
      (?i:
        (add|addcolumn|addrow|append|avg|blur|cjustify|clear|clearrect|columnarray|columncount|columndata|columnexists
        |columnlist|compare|comparenocase|contains|containsnocase|copy|count|crop|currentrow|dateformat|day|dayofweek
        |dayofyear|daysinmonth|daysinyear|delete|deleteat|deletecolumn|deleterow|diff|drawarc|drawcubiccurve|drawline
        |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|each|every|filter|find|findall
        |findallnocase|findkey|findnocase|findoneof|findvalue|first|firstdayofmonth|flip|get|getbufferedimage|getcell
        |getheight|getrow|gettoken|getwidth|grayscale|hour|indexexists|info|insert|insertat|isdefined|isempty|keyarray
        |keyexists|keylist|keytranslate|last|lcase|left|len|listappend|listavg|listchangedelims|listcompact|listcontains
        |listcontainsnocase|listdeleteat|listeach|listevery|listfilter|listfind|listfindnocase|listfirst|listgetat
        |listindexexists|listinsertat|listitemtrim|listlast|listlen|listmap|listprepend|listqualify|listreduce
        |listremoveduplicates|listrest|listsetat|listsome|listsort|listtoarray|listvaluecount|listvaluecountnocase
        |ljustify|lsdateformat|lsdayofweek|ltrim|map|max|median|merge|mid|min|minute|month|overlay|part|paste|prepend
        |quarter|recordcount|reduce|refind|refindnocase|rematch|rematchnocase|removechars|repeatstring|replace|replacenocase
        |rereplace|rereplacenocase|resize|reverse|right|rowdata|rtrim|scaletofit|second|set|setantialiasing|setcell
        |setdrawingstroke|sharpen|slice|some|sort|spanexcluding|spanincluding|stripcr|sum|swap|tolist|tostruct|translate
        |trim|ucase|update|week|wrap|writebase64|year)
      )(\()
    beginCaptures:
      '1': {name: support.function.member.cfml}
      '2': {name: meta.support.function-call.member.arguments.cfml punctuation.definition.group.begin.cfml}
    end: \)
    endCaptures:
      '0': {name: meta.support.function-call.member.arguments.cfml punctuation.definition.group.end.cfml}
    patterns:
    - match: ','
      name: punctuation.separator.argument.function.cfml
    - begin: '\b([_$a-zA-Z][$\w\.]*)\s*(=)(?!=)'
      captures:
        '1': {name: entity.other.method-parameter.cfml}
        '2': {name: keyword.operator.assignment.cfml}
      end: '(?=[,\)])'
      patterns:
      - include: '#expressions'
    - include: '#expressions'

  tag-generic-attribute-script:
    patterns:
    - match: \b[a-zA-Z0-9:-]+\b
      name: meta.tag.script.cfml entity.other.attribute-name.cfml
    - name: meta.tag.script.cfml
      begin: '='
      beginCaptures:
        '0': {name: punctuation.separator.key-value.cfml}
      end: (?=\s*\b([a-zA-Z0-9:-]+)\s*=)|(?=[;\{])
      patterns:
      - include: '#expressions'

  tag-in-script:
    patterns:
    - name: meta.tag.script.cfml meta.tag.property.cfml
      begin: (?i)\b(property)(?!\s+in\b)(\s+(any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid|[_$a-zA-Z][$\w]*))?\s+([_$a-zA-Z][$\w]*\b)(?!\s*=)
      beginCaptures:
        '1': {name: entity.name.tag.script.cfml}
        '3': {name: storage.type.cfml}
        '4': {name: string.unquoted.cfml meta.tag.property.name.cfml}
      end: (?=(;|{))
      patterns:
      - include: '#tag-generic-attribute'
    - name: meta.tag.script.cfml meta.tag.property.cfml
      begin: (?i)\b(property)(?!\s+in\b)(?=(\s+[a-zA-Z]|\s*$|\s*[{;]))
      beginCaptures:
        '1': {name: entity.name.tag.script.cfml}
      end: (?=(;|{))
      patterns:
      - match: (?i)\b(name)\s*(=)\s*(?:((")([^<>"']*)("))|((')([^<>"']*)('))|([^<>"'\s]*))
        captures:
          '1': {name: entity.other.attribute-name.cfml}
          '2': {name: punctuation.separator.key-value.cfml}
          '3': {name: string.quoted.double.cfml}
          '4': {name: punctuation.definition.string.begin.cfml}
          '5': {name: meta.tag.property.name.cfml}
          '6': {name: punctuation.definition.string.end.cfml}
          '7': {name: string.quoted.single.cfml}
          '8': {name: punctuation.definition.string.begin.cfml}
          '9': {name: meta.tag.property.name.cfml}
          '10': {name: punctuation.definition.string.end.cfml}
          '11': {name: string.unquoted.cfml meta.tag.property.name.cfml}
      - include: '#tag-generic-attribute'
    - name: meta.tag.script.cfml
      begin: (?i)\b(param)(?!\s+in\b)(?=\s+(name|default|max|maxLength|min|pattern|type)\s*=)
      beginCaptures:
        '1': {name: entity.name.tag.script.cfml}
      end: (?=[;{])
      patterns:
      - include: '#tag-generic-attribute-script'
    - name: meta.tag.script.cfml
      begin: (?i)\b(param)(?!\s+in\b)\s+([_$a-zA-Z][$\w\.]*)(?=\s+(name|default|max|maxLength|min|pattern|type))
      beginCaptures:
        '1': {name: entity.name.tag.script.cfml}
        '2': {name: string.unquoted.cfml}
      end: (?=[;{])
      patterns:
      - include: '#tag-generic-attribute-script'
    - name: meta.tag.script.cfml
      begin: (?i)\b(param)(?!\s+in\b)(\s+([_$a-zA-Z][$\w]*))?\s+([_$a-zA-Z][$\w\.]*\b)
      beginCaptures:
        '1': {name: entity.name.tag.script.cfml}
        '3': {name: storage.type.cfml}
        '4': {name: string.unquoted.cfml}
      end: (?=[;{])
      patterns:
      - include: '#tag-generic-attribute-script'
    - name: meta.tag.script.cfml
      begin: (?i)\b(param)(?!\s+in\b)(?=(\s+[a-zA-Z]|\s*[{;]|\s*$))
      beginCaptures:
        '1': {name: entity.name.tag.script.cfml}
      end: (?=[;{])
      patterns:
      - include: '#tag-generic-attribute-script'
    - begin: |-
        (?x)(\b)
        (?i:
          (ajaximport|ajaxproxy|applet|application|argument|associate|break|cache|calendar
          |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo
          |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar
          |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask
          |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn
          |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image
          |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout
          |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart
          |map|mapitem|mediaplayer|menu|menuitem|messagebox|module|ntauthenticate|oauth|object
          |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop
          |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult
          |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule
          |search|select|setting|sharepoint|silent|slider|spreadsheet|sprydataset|storedproc
          |table|textarea|textinput|thread|throw|timer|tooltip|trace|transaction|tree|treeitem|try
          |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)
        )(?=\s+[a-zA-Z0-9:-]+\s*([=;{]|$)|\s*({|$))
      beginCaptures:
        '2': {name: meta.tag.script.cfml entity.name.tag.script.cfml}
      end: (\})|(?=;)
      endCaptures:
        '1': {name: meta.block.cfml punctuation.definition.block.end.cfml}
      patterns:
      - match: \s+
        name: meta.tag.script.cfml
      - include: '#tag-generic-attribute-script'
      - include: '#block-scope'

  tag-in-script-cf:
    patterns:
    - name: meta.tag.script.cf.cfml
      begin: |-
        (?x)(?i)
          (cf
          (?:ajaximport|ajaxproxy|applet|application|argument|associate|break|cache|calendar
          |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo
          |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar
          |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask
          |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn
          |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image
          |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout
          |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart
          |map|mapitem|mediaplayer|menu|menuitem|messagebox|module|ntauthenticate|oauth|object
          |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop
          |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult
          |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule
          |search|select|setting|sharepoint|silent|slider|spreadsheet|sprydataset|storedproc
          |table|textarea|textinput|thread|throw|timer|tooltip|trace|transaction|tree|treeitem|try
          |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)
        )\(
      beginCaptures:
        '1': {name: entity.name.tag.script.cfml}
      end: \)
      patterns:
      - match: \b([a-zA-Z0-9:-]+)\b
        captures:
          '1': {name: entity.other.attribute-name.cfml}
      - begin: '='
        beginCaptures:
          '0': {name: punctuation.separator.key-value.cfml}
        end: (?=\s*\b([a-zA-Z0-9:-]+)\s*=)|(?=\))
        patterns:
        - include: '#expressions'

  tag-generic-attribute:
    patterns:
    - include: '#comments'
    - match: \b([a-zA-Z0-9:-]+)\b
      captures:
        '1': {name: entity.other.attribute-name.cfml}
    - match: (=)\s*((?:[^\s<>/'"{;]|/(?!/>))+)
      captures:
        '1': {name: punctuation.separator.key-value.cfml}
        '2': {name: string.unquoted.cfml}
    - name: punctuation.separator.key-value.cfml
      match: '='
    - include: '#tag-string'

  tag-string:
    patterns:
    - include: '#tag-string-quoted-single'
    - include: '#string-quoted-double'

  tag-string-quoted-double:
    name: string.quoted.double.cfml
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.cfml}
    end: '"(?!")'
    endCaptures:
      '0': {name: punctuation.definition.string.end.cfml}
    patterns:
    - name: constant.character.escape.quote.cfml
      match: '""'
    - include: '#hash-delimiters'

  tag-string-quoted-single:
    name: string.quoted.single.cfml
    begin: ''''
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.cfml}
    end: '''(?!'')'
    endCaptures:
      '0': {name: punctuation.definition.string.end.cfml}
    patterns:
    - name: constant.character.escape.quote.cfml
      match: ''''''
    - include: '#hash-delimiters'

