%YAML 1.2
---
# started with https://github.com/SublimeText/ColdFusion
# uses JavaScript package from sublimehq as a reference: https://github.com/sublimehq/Packages/tree/master/JavaScript
# that package was derived from JavaScript Next: https://github.com/Benvie/JavaScriptNext.tmLanguage
##
# current version is a mod of Will Bond's (@wbond) *awesome* JavaScript syntax rewrite
# https://github.com/sublimehq/Packages/blob/master/JavaScript/JavaScript.sublime-syntax

name: CFML Script
scope: source.cfml.script
hidden: true
variables:
  identifier: '[_$[:alpha:]][_$[:alnum:]]*'
  constant_identifier: '[[:upper:]][_$[:digit:][:upper:]]*\b'
  func_lookahead: '\s*\bfunction\b'
  arrow_func_lookahead: '\s*\([^\(]*?\)\s*=>'

contexts:
  prototype:
    - include: comments

  main:
    - include: keywords-top-level
    - include: component
    - include: statements

  keywords-top-level:
    - match: \bimport\b
      scope: keyword.control.import.cfml
      push:
        - meta_scope: meta.import.cfml
        - match: '(?=\n|;)'
          pop: true
        - include: string
        - match: '{{identifier}}'
          scope: variable.other.readwrite.cfml
        - match: '\*'
          scope: constant.other.cfml
        - match: '(?=\S)'
          pop: true

  statements:
    - include: conditional
    - include: static
    - match: '\{'
      scope: punctuation.definition.block.begin.cfml
      push:
        - meta_scope: meta.block.cfml
        - match: '\}'
          scope: punctuation.definition.block.end.cfml
          pop: true
        - include: statements
    - include: tag-in-script
    - include: tag-in-script-cf
    - include: expressions

  conditional:
    - match: \bswitch\b
      scope: keyword.control.switch.cfml
      push:
        - meta_scope: meta.switch.cfml
        - include: round-brackets
        - match: '\}'
          scope: meta.block.cfml punctuation.definition.block.end.cfml
          pop: true
        - match: '\{'
          scope: punctuation.definition.block.begin.cfml
          push:
            - meta_scope: meta.block.cfml
            - match: '(?=\})'
              pop: true
            - match: ':'
              push:
                - match: '(?=(\bcase\b|\bdefault\b|\}))'
                  pop: true
                - include: statements
            - match: \b(case|default)\b
              scope: keyword.control.switch.cfml
            - include: expressions
    - match: \bdo\b
      scope: keyword.control.loop.cfml
      push:
        - meta_scope: meta.do-while.cfml
        - match: '\{'
          scope: punctuation.definition.block.begin.cfml
          push:
            - meta_scope: meta.block.cfml
            - match: '\}'
              scope: punctuation.definition.block.end.cfml
              pop: true
            - include: statements
        - match: \bwhile\b
          scope: keyword.control.loop.cfml
        - match: '\('
          scope: punctuation.definition.group.begin.cfml
          push:
            - meta_scope: meta.group.cfml
            - match: '(?=\))'
              pop: true
            - include: expressions
        - match: '\)'
          scope: meta.group.cfml punctuation.definition.group.end.cfml
          pop: true
    - match: \bfor\b
      scope: keyword.control.loop.cfml
      push:
        - meta_scope: meta.for.cfml
        - include: parens-block-scope
    - match: \bwhile\b
      scope: keyword.control.loop.cfml
      push:
        - meta_scope: meta.while.cfml
        - include: parens-block-scope
    - match: \b(else\s+if|if)\b
      scope: keyword.control.conditional.cfml
      push:
        - meta_scope: meta.conditional.cfml
        - include: parens-block-scope
    - match: \belse\b
      scope: keyword.control.conditional.cfml
      push:
        - meta_scope: meta.conditional.cfml
        - include: block-scope
    - match: \btry\b
      scope: keyword.control.trycatch.cfml
      push:
        - meta_scope: meta.try.cfml
        - include: block-scope
    - match: \bfinally\b
      scope: keyword.control.trycatch.cfml
      push:
        - meta_scope: meta.finally.cfml
        - include: block-scope
    - match: \bcatch\b
      scope: keyword.control.trycatch.cfml
      push:
        - meta_scope: meta.catch.cfml
        - include: parens-block-scope

  static:
    - match: \bstatic\b(?=\s*[\n\{])
      scope: keyword.control.static.cfml
      push:
        - meta_scope: meta.block.static.cfml
        - include: block-scope

  parens-block-scope:
    - match: '\('
      scope: punctuation.definition.group.begin.cfml
      push:
        - meta_scope: meta.group.cfml
        - match: '\)'
          scope: punctuation.definition.group.end.cfml
          pop: true
        - include: expressions
    - include: block-scope

  block-scope:
    - match: '\}'
      scope: meta.block.cfml punctuation.definition.block.end.cfml
      pop: true
    - match: '\{'
      scope: punctuation.definition.block.begin.cfml
      push:
        - meta_scope: meta.block.cfml
        - match: '(?=\})'
          pop: true
        - include: statements
    - match: '(?=\S)'
      pop: true

  expressions:
    - include: string
    - include: constructor
    - include: operators
    - include: keywords
    - include: constants
    - include: named-function
    - include: anonymous-function
    - include: struct-literal
    - include: round-brackets
    - include: array-literal
    - include: number
    - include: call
    - include: variable
    - include: punctuation

  after-operator:
    # Prevent matching "{" as a block, but instead always treat as an struct
    # literal. This is needed since in the "statements" context, a "{" starts
    # an anonymous block, not an struct literal.
    - match: '(?=\{)'
      push:
        - include: struct-literal
        - match: '(?=.|\n)'
          pop: true
    - match: '(?=\S)'
      pop: true

  after-identifier:
    - match: '\['
      scope: punctuation.definition.brackets.begin.cfml
      push:
        - meta_scope: meta.brackets.cfml
        - match: '\]'
          scope: punctuation.definition.brackets.end.cfml
          pop: true
        - include: expressions
    - match: '(?=[\S\n])'
      pop: true

  comments:
    - match: (/\*\*)\s*$
      scope: punctuation.definition.comment.cfml
      push:
        - meta_scope: comment.block.documentation.cfml
        - match: \*/
          scope: punctuation.definition.comment.cfml
          pop: true
        - match: ^\s*\*?\s*((\@)\S*)\s
          captures:
            1: keyword.other.documentation.cfml
            2: punctuation.definition.keyword.cfml
          push: cfmldoc
        - match: ^\s*(\*(?!/))?\s*(?=\w)
          push: cfmldoc
    - match: /\*
      scope: punctuation.definition.comment.cfml
      push:
        - meta_scope: comment.block.cfml
        - match: \*/
          scope: punctuation.definition.comment.cfml
          pop: true
    - match: //
      scope: punctuation.definition.comment.cfml
      push:
        - meta_scope: comment.line.double-slash.cfml
        - match: \n
          pop: true
    - include: scope:embedding.cfml#comments

  cfmldoc:
    - meta_content_scope: text.html
    - match: (\n|(?=\*/))
      pop: true
    - include: scope:text.html.basic

  string:
    - match: "'"
      scope: punctuation.definition.string.begin.cfml
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.cfml
        - match: ('')
          scope: constant.character.escape.quote.cfml
        - match: (')
          captures:
            1: punctuation.definition.string.end.cfml
          pop: true
        - include: scope:embedding.cfml#hash-delimiters
    - match: '"'
      scope: punctuation.definition.string.begin.cfml
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.cfml
        - match: ("")
          scope: constant.character.escape.quote.cfml
        - match: (")
          captures:
            1: punctuation.definition.string.end.cfml
          pop: true
        - include: scope:embedding.cfml#hash-delimiters

  constructor:
    - match: '\b(new)\s+'
      captures:
        1: keyword.operator.new.cfml
      push:
        - meta_scope: meta.instance.constructor.cfml
        - match: '\b{{identifier}}(?=\()'
          scope: entity.name.class.cfml
          set: constructor-params
        - match: '\b{{identifier}}\b|\.'
          scope: entity.name.class.cfml
        - match: ""
          pop: true

  constructor-params:
    - meta_content_scope: meta.instance.constructor.cfml
    - match: '\)'
      scope: meta.instance.constructor.cfml meta.function-call.parameters.method.cfml punctuation.definition.group.end.cfml
      pop: true
    - match: '\('
      scope: punctuation.definition.group.begin.cfml
      push:
        - meta_scope: meta.function-call.parameters.method.cfml
        - match: '(?=\))'
          pop: true
        - match: ','
          scope: punctuation.separator.function-call.method.cfml
        - match: '\b({{identifier}})\s*(=)(?!=)'
          captures:
            1: entity.other.method-parameter.cfml
            2: keyword.operator.assignment.cfml
          push:
            - match: '(?=[,\)])'
              pop: true
            - include: expressions
        - include: expressions

  operators:
    - match: '!(?!=)'
      scope: keyword.operator.logical.cfml
    - match: \b(?i:not)\b
      scope: keyword.operator.logical.cfml
    - match: '--|\+\+'
      scope: keyword.operator.arithmetic.cfml
    - match: \bnew\b
      scope: keyword.operator.new.cfml
    - match: \b(in|void)\b
      scope: keyword.operator.cfml
      push: after-operator
    - match: '&&|\|\|'
      scope: keyword.operator.logical.cfml
      push: after-operator
    - match: \b(?i:(and|or|xor|eqv|imp))\b
      scope: keyword.operator.logical.cfml
      push: after-operator
    - match: '=(?!=)'
      scope: keyword.operator.assignment.cfml
      push: after-operator
    - match: \b(?i:(greater|less|than|equal\s+to|does|contains|equal|eq|neq|lt|lte|le|gt|gte|ge|and|is))\b
      scope: keyword.operator.decision.cfml
      push: after-operator
    - match: |-
        (?x)
        %=   | # assignment      right-to-left   both
        &=   | # assignment      right-to-left   both
        \*=  | # assignment      right-to-left   both
        \+=  | # assignment      right-to-left   both
        -=   | # assignment      right-to-left   both
        /=     # assignment      right-to-left   both
      scope: keyword.operator.assignment.augmented.cfml
      push: after-operator
    - match: '&'
      scope: keyword.operator.concat.cfml
      push: after-operator
    - match: |-
        (?x)
        <=   | # relational      left-to-right   both
        >=   | # relational      left-to-right   both
        <    | # relational      left-to-right   both
        >      # relational      left-to-right   both
      scope: keyword.operator.relational.cfml
      push: after-operator
    - match: |-
        (?x)
        ==   | # equality        left-to-right   both
        !=     # equality        left-to-right   both
      scope: keyword.operator.comparison.cfml
      push: after-operator
    - match: |-
        (?x)
        /    | # division        left-to-right   both
        %    | # modulus         left-to-right   both
        \*   | # multiplication  left-to-right   both
        \+   | # addition        left-to-right   both
        -      # subtraction     left-to-right   both
      scope: keyword.operator.arithmetic.cfml
      push: after-operator
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.cfml
      push: after-operator

  component:
    - match: (?i)^\s*(?:(abstract|final)\s+)?(component)\b
      captures:
        1: storage.modifier.cfml
        2: storage.type.class.cfml
      push:
        - meta_scope: meta.class.declaration.cfml
        - match: '(?=\{)'
          set: component-body
        - include: component-attributes
    - match: (?i)^\s*(interface)\b
      captures:
        1: storage.type.interface.cfml
      push:
        - meta_scope: meta.interface.declaration.cfml
        - match: '(?=\{)'
          set: interface-body
        - include: component-attributes

  component-attributes:
    - match: (?i)\b(extends)\s*(=)\s*
      captures:
        1: storage.modifier.extends.cfml
        2: punctuation.separator.key-value.cfml
      push:
        - meta_scope: meta.class.inheritance.cfml
        - match: (")([a-zA-Z0-9:.]+)?(")
          captures:
            0: string.quoted.double.cfml
            1: punctuation.definition.string.begin.cfml
            2: entity.other.inherited-class.cfml
            3: punctuation.definition.string.end.cfml
          pop: true
        - match: (')([a-zA-Z0-9:.]+)?(')
          captures:
            0: string.quoted.single.cfml
            1: punctuation.definition.string.begin.cfml
            2: entity.other.inherited-class.cfml
            3: punctuation.definition.string.end.cfml
          pop: true
        - match: ([a-zA-Z0-9:.]+)
          captures:
            0: string.unquoted.cfml
            1: entity.other.inherited-class.cfml
          pop: true
        - match: (?=[^a-zA-Z0-9:.])
          pop: true
    - include: scope:embedding.cfml#tag-generic-attribute

  component-body:
    - meta_scope: meta.class.body.cfml
    - match: '\}'
      scope: punctuation.definition.block.end.cfml
      pop: true
    - match: '\{'
      scope: punctuation.definition.block.begin.cfml
      push:
        - match: '(?=\})'
          pop: true
        - include: statements

  interface-body:
    - meta_scope: meta.interface.body.cfml
    - match: '\}'
      scope: punctuation.definition.block.end.cfml
      pop: true
    - match: '\{'
      scope: punctuation.definition.block.begin.cfml
      push:
        - match: '(?=\})'
          pop: true
        - include: statements

  keywords:
    - match: \b(throw|rethrow)\b(?!\s*\()
      scope: keyword.control.trycatch.cfml
    - match: \b(break|continue)\b
      scope: keyword.control.loop.cfml
    - match: \b(abort)\b
      scope: keyword.control.flow.cfml
    - match: \b(return)\b
      scope: keyword.control.flow.cfml
      push: after-operator
    - match: \bvar\b
      scope: storage.type.cfml

  constants:
    - match: \btrue\b
      scope: constant.language.boolean.true.cfml
    - match: \bfalse\b
      scope: constant.language.boolean.false.cfml
    - match: \bnull\b
      scope: constant.language.null.cfml

  named-function:
    - match: |-
        (?x)
        (?:
          (?:
            (?i:\b(private|package|public|remote|static|final|abstract)\s+)?
            (?i:\b(private|package|public|remote|static|final|abstract)\s+)?
            (?i:\b
              (void)\s+
              |
              (any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid)\s+
              |
              ([A-Za-z0-9_\.$]+)\s+
              |
              ([A-Za-z0-9_\.$]+)(\[)(\])?\s+
            )?
          )
        )
        (?i:(function))
        \s+
        (?:
          (init)
          |
          ([_$a-zA-Z][$\w]*)
        )\b
      captures:
        0: meta.function.declaration.cfml
        1: storage.modifier.cfml
        2: storage.modifier.cfml
        3: storage.type.return-type.void.cfml
        4: storage.type.return-type.primitive.cfml
        5: storage.type.return-type.object.cfml
        6: storage.type.return-type.object.array.cfml
        7: meta.brackets.cfml punctuation.definition.brackets.begin.cfml
        8: meta.brackets.cfml punctuation.definition.brackets.end.cfml
        9: storage.type.function.cfml
        10: entity.name.function.constructor.cfml
        11: entity.name.function.cfml
      push:
        - include: function-declaration-parameters
        - match: '(?=;)'
          pop: true
        - match: '(?=\{)'
          set: function-block
    - match: '(?=(({{identifier}})\s*(\.)\s*)+({{identifier}})\s*(=)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))'
      push:
        - meta_scope: meta.function.declaration.cfml
        - match: '(?={{func_lookahead}})'
          set: function-declaration
        - match: '(?={{arrow_func_lookahead}})'
          set: arrow-function-declaration
        - include: function-declaration-identifiers
    - match: '(?=({{identifier}})\s*(=)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))'
      push:
        - meta_scope: meta.function.declaration.cfml
        - match: '(?={{func_lookahead}})'
          set: function-declaration
        - match: '(?={{arrow_func_lookahead}})'
          set: arrow-function-declaration
        - include: function-declaration-single-identifier
    - match: '(?={{func_lookahead}}\s+{{identifier}})'
      push: function-declaration

  anonymous-function:
    - match: '(?={{func_lookahead}})'
      push:
        - meta_content_scope: meta.function.anonymous.cfml
        - include: function-declaration
    - match: '(?={{arrow_func_lookahead}})'
      push:
        - meta_content_scope: meta.function.anonymous.cfml
        - include: arrow-function-declaration

  function-declaration-identifiers:
    - match: '(?={{identifier}}\s*\.)'
      push:
        - include: cfml-scopes
        - match: '{{identifier}}'
          scope: support.class.cfml
        - match: '\.'
          scope: punctuation.accessor.cfml
          pop: true
    - include: function-declaration-final-identifier

  function-declaration-final-identifier:
    - match: '(?={{identifier}}\s*(=)\s*)'
      push:
        - match: '{{identifier}}'
          scope: meta.property.cfml entity.name.function.cfml
        - match: '\s*(=)\s*'
          captures:
            1: keyword.operator.assignment.cfml
          pop: true

  function-declaration-single-identifier:
    - match: '\s*(=)\s*'
      captures:
        1: keyword.operator.assignment.cfml
    - match: '(?={{identifier}})'
      push:
        - match: '{{constant_identifier}}'
          scope: variable.other.constant.cfml entity.name.function.cfml
        - match: '{{identifier}}'
          scope: variable.other.readwrite.cfml entity.name.function.cfml
        - match: (?=.)
          pop: true

  either-function-declaration:
    - match: '(?={{func_lookahead}})'
      push: function-declaration
    - match: '(?={{arrow_func_lookahead}})'
      push: arrow-function-declaration

  function-declaration:
    - match: \b(function)\b\s*
      scope: meta.function.declaration.cfml
      captures:
        1: storage.type.function.cfml
    - match: '{{identifier}}'
      scope: meta.function.declaration.cfml entity.name.function.cfml
    - include: function-declaration-parameters
    - match: '(?={)'
      set: function-block
    - match: '(?=[^\s\{\(])'
      push:
        - meta_scope: meta.function.declaration.cfml
        - match: '(?=\{)'
          pop: true
        - include: scope:embedding.cfml#tag-generic-attribute

  arrow-function-declaration:
    - match: '\s*(=>)\s*(?=\{)'
      scope: meta.function.declaration.cfml
      captures:
        1: storage.type.function.arrow.cfml
      set: function-block
    - match: '(\s*(=>))\s*'
      captures:
        0: meta.function.declaration.cfml
        2: storage.type.function.arrow.cfml
      set: arrow-function-concise-body
    - include: function-declaration-parameters

  arrow-function-concise-body:
    - meta_content_scope: meta.function.body.cfml
    - match: '(?=[);}\],])'
      pop: true
    - match: '\n'
      set: arrow-function-concise-continuation
    # This custom comment match is required so that we move to the
    # arrow-function-concise-continuation context to try and continue the
    # body. Previously we didn't match the \n in the comments context, but that
    # caused completions to appear at the end of a single-line comment.
    - match: //
      scope: punctuation.definition.comment.cfml
      set:
        - meta_scope: comment.line.double-slash.cfml
        - match: \n
          set: arrow-function-concise-continuation
    - include: expressions

  arrow-function-concise-continuation:
    # Allow newlines in a concise body if the next line is a continuation
    # of the previous via method chaining
    - match: '(?=^\s*(\.|/[/*]))'
      set: arrow-function-concise-body
    - match: '(?=.|\n)'
      pop: true

  function-block:
    - match: '\}'
      scope: meta.function.body.cfml punctuation.definition.block.end.cfml
      pop: true
    - match: '\{'
      scope: punctuation.definition.block.begin.cfml
      push:
        - meta_scope: meta.function.body.cfml
        - match: '(?=\})'
          pop: true
        - include: statements

  function-declaration-parameters:
    - match: \(
      scope: punctuation.definition.parameters.begin.cfml
      push:
        - meta_scope: meta.function.declaration.cfml meta.function.parameters.cfml
        - match: \)
          scope: punctuation.definition.parameters.end.cfml
          set: function-declaration-properties
        - match: ','
          scope: punctuation.separator.function.cfml
        - match: (?i:required)
          scope: keyword.other.required.argument.cfml
        - match: (?:({{identifier}})\s+)?({{identifier}})
          captures:
            1: storage.type.cfml
            2: variable.parameter.function.cfml
          push:
            - match: (?=[,)])
              pop: true
            - match: (?={{identifier}})
              set:
                - match: '(?=[,)])'
                  pop: true
                - include: scope:embedding.cfml#tag-generic-attribute
            - match: '(=)\s*({{identifier}})?'
              captures:
                1: keyword.operator.assignment.cfml
                2: variable.other.readwrite.cfml
              push:
                - meta_scope: meta.parameter.optional.cfml
                - match: '(?=({{identifier}}|[,)]))'
                  pop: true
                - match: '(?=\s*([+\-*/&%])\s*{{identifier}})'
                  push:
                    - match: '{{identifier}}'
                      scope: variable.other.readwrite.cfml
                      pop: true
                    - include: operators
                - include: expressions

  function-declaration-properties:
    - meta_content_scope: meta.function.declaration.cfml
    - match: '(?=(\{|=>|;))'
      pop: true
    - include: scope:embedding.cfml#tag-generic-attribute

  struct-literal:
    - match: '\{'
      scope: punctuation.definition.block.begin.cfml
      push:
        - meta_scope: meta.struct-literal.cfml
        - match: '\}'
          scope: punctuation.definition.block.end.cfml
          pop: true
        - match: "(?=('[^']*'|\"[^\"]*\"|{{identifier}})\\s*(:|=)({{func_lookahead}}|{{arrow_func_lookahead}}))"
          push:
            - meta_content_scope: meta.function.declaration.cfml
            - match: "'"
              scope: punctuation.definition.string.begin.cfml
              push:
                - meta_include_prototype: false
                - meta_scope: meta.struct-literal.key.cfml string.quoted.single.cfml
                - meta_content_scope: entity.name.function.cfml
                - match: (')
                  captures:
                    1: punctuation.definition.string.end.cfml
                  pop: true
                - include: scope:embedding.cfml#hash-delimiters
            - match: '"'
              scope: punctuation.definition.string.begin.cfml
              push:
                - meta_include_prototype: false
                - meta_scope: meta.struct-literal.key.cfml string.quoted.double.cfml
                - meta_content_scope: entity.name.function.cfml
                - match: (")
                  captures:
                    1: punctuation.definition.string.end.cfml
                  pop: true
                - include: scope:embedding.cfml#hash-delimiters
            - match: '{{identifier}}'
              scope: meta.struct-literal.key.cfml entity.name.function.cfml
            - match: '(?=(:|=))'
              set:
                - match: '(:|=)\s*'
                  captures:
                    0: meta.function.declaration.cfml
                    1: punctuation.separator.key-value.cfml
                - include: either-function-declaration
                - match: '(?=\S)'
                  pop: true
        - match: "(?=\"|')"
          push:
            - meta_scope: meta.struct-literal.key.cfml
            - include: string
            - match: '(?=.|\n)'
              pop: true
        - match: '{{identifier}}(?=\s*[:=])'
          scope: meta.struct-literal.key.cfml
        - match: '(:|=)\s*'
          captures:
            1: punctuation.separator.key-value.cfml
          push:
            - match: '(,)|(?=\})'
              captures:
                1: punctuation.separator.struct-literal.cfml
              pop: true
            - include: expressions

  round-brackets:
    - match: \(
      scope: punctuation.definition.group.begin.cfml
      push:
        - meta_scope: meta.group.cfml
        - match: \)
          scope: punctuation.definition.group.end.cfml
          set: after-identifier
        - include: expressions
    - match: \)
      scope: invalid.illegal.stray.brace.round.cfml

  array-literal:
    - match: '\['
      scope: punctuation.definition.brackets.begin.cfml
      push:
        - meta_scope: meta.array-literal.cfml
        - match: '\]'
          scope: punctuation.definition.brackets.end.cfml
          set: after-identifier
        - match: ','
          scope: punctuation.separator.array-literal.cfml
        - include: expressions

  number:
    - match: |-
        (?xi)
        (?:\B[-+])?
        (?:
          \b0x[0-9a-f]*|              # hex
          (
            \B\.[0-9]+|               # e.g. .999
            \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
          )
        )
      scope: constant.numeric.cfml
      push: after-identifier

  call:
    - match: '(?=\b{{identifier}}\s*\()'
      push:
        - include: support-call
        - match: '({{identifier}})(?=\s*\()'
          scope: variable.function.cfml
          set:
            - meta_scope: meta.function-call.cfml
            - include: function-call-params
    - match: '(?={{identifier}}\s*\.\s*{{identifier}}\s*\()'
      push:
        - match: '(?={{identifier}}\s*\.)'
          push:
            - include: cfml-scopes
            - match: '{{identifier}}'
              scope: variable.other.object.cfml
            - match: \.
              scope: punctuation.accessor.cfml
              pop: true
        - match: \.
          scope: keyword.other.accessor.cfml
        - include: method-call
        - match: '(?=[^ ])'
          pop: true
    - match: (?=\b[_.$[:alnum:]]+\s*::\s*{{identifier}}\s*\()
      push:
        - match: '\b{{identifier}}\.'
          scope: entity.name.class.cfml
        - match: '\b({{identifier}})(::)'
          captures:
            1: entity.name.class.cfml
            2: punctuation.accessor.static.cfml
        - include: static-method-call
        - match: ""
          pop: true

  method-call:
    - include: support-method-call
    - match: '({{identifier}})\s*(?=\()'
      captures:
        1: variable.function.cfml
      set:
        - meta_scope: meta.function-call.method.cfml
        - include: method-call-params

  static-method-call:
    - match: '({{identifier}})\s*(?=\()'
      captures:
        1: variable.function.static.cfml
      set:
        - meta_scope: meta.function-call.method.static.cfml
        - include: method-call-params

  function-call-params:
    - match: '\)'
      scope: meta.function-call.parameters.cfml punctuation.definition.group.end.cfml
      set: after-identifier
    - match: '\('
      scope: punctuation.definition.group.begin.cfml
      push:
        - meta_scope: meta.function-call.parameters.cfml
        - match: '(?=\))'
          pop: true
        - match: ','
          scope: punctuation.separator.function-call.cfml
        - match: '\b({{identifier}})\s*(=)(?!=)'
          captures:
            1: entity.other.function-parameter.cfml
            2: keyword.operator.assignment.cfml
          push:
            - match: '(?=[,\)])'
              pop: true
            - include: expressions
        - include: expressions

  method-call-params:
    - match: '\)'
      scope: meta.function-call.parameters.method.cfml punctuation.definition.group.end.cfml
      set: after-identifier
    - match: '\('
      scope: punctuation.definition.group.begin.cfml
      push:
        - meta_scope: meta.function-call.parameters.method.cfml
        - match: '(?=\))'
          pop: true
        - match: ','
          scope: punctuation.separator.function-call.method.cfml
        - match: '\b({{identifier}})\s*(=)(?!=)'
          captures:
            1: entity.other.method-parameter.cfml
            2: keyword.operator.assignment.cfml
          push:
            - match: '(?=[,\)])'
              pop: true
            - include: expressions
        - include: expressions

  cfml-scopes:
    - match: \b(?i:super)\b
      scope: variable.language.super.cfml
    - match: \b(?i:this)\b
      scope: variable.language.this.cfml
    - match: \b(?i:thread)\b(?=[\[.])
      scope: variable.language.scope.cfml
    - match: |-
        (?x)
          \b(?i:(
          application|arguments|attributes|caller|cgi|client|cookie|flash|form|
          local|request|server|session|thistag|url|variables|self|static|argumentcollection
        ))\b
      scope: variable.language.scope.cfml

  variable:
    - match: '(?={{identifier}})'
      push:
        - match: '(?!{{identifier}})'
          set: after-identifier
        - include: cfml-scopes
        - match: '[_.$[:alnum:]]+(?=\s*::)'
          scope: entity.name.class.cfml
        - match: '{{identifier}}(?=\s*[\[\.])'
          scope: variable.other.struct.cfml
        - match: '{{constant_identifier}}'
          scope: variable.other.constant.cfml
        - match: '{{identifier}}'
          scope: variable.other.readwrite.cfml

  struct-property:
    - match: '{{constant_identifier}}'
      scope: meta.property.constant.cfml
    - match: '{{identifier}}'
      scope: meta.property.cfml
    - match: '(?=.|\n)'
      set: after-identifier

  punctuation:
    - match: \.
      scope: punctuation.accessor.cfml
      push:
      # All of these matches use set (or effectively a set via the final
      # include/match/pop construct) instead of push so that we escape this
      # accessor state once a match has been made. Otherwise identifiers
      # following method definitions or method calls will be scoped as
      # properties.
        - match: '(?=({{identifier}})\s*(=)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))'
          set:
            - meta_scope: meta.function.declaration.cfml
            - match: '(?={{func_lookahead}})'
              set: function-declaration
            - match: '(?={{arrow_func_lookahead}})'
              set: arrow-function-declaration
            - include: function-declaration-final-identifier
        - match: '(?={{identifier}}\s*\()'
          set:
            - include: method-call
            - match: '(?=(.|\n))'
              pop: true
        - include: struct-property
    - match: '::'
      scope: punctuation.accessor.static.cfml
      push:
        - match: '(?=({{identifier}})\s*(=)\s*({{func_lookahead}}|{{arrow_func_lookahead}}))'
          set:
            - meta_scope: meta.function.declaration.cfml
            - match: '(?={{func_lookahead}})'
              set: function-declaration
            - match: '(?={{arrow_func_lookahead}})'
              set: arrow-function-declaration
            - include: function-declaration-final-identifier
        - match: '(?={{identifier}}\s*\()'
          set:
            - include: static-method-call
            - match: '(?=(.|\n))'
              pop: true
        - include: struct-property
    - match: \;
      scope: punctuation.terminator.statement.cfml
    - match: ","
      scope: meta.delimiter.comma.cfml

  tag-generic-attribute-script:
    - meta_scope: meta.tag.script.cfml
    - match: (?=;)
      pop: true
    - match: (?={)
      set: block-scope
    - match: '\b([a-zA-Z0-9:-]+)\b'
      captures:
        1: entity.other.attribute-name.cfml
    - match: =
      scope: punctuation.separator.key-value.cfml
      push:
        - match: (?=[;{])
          pop: true
        - match: (?=\s*\b([a-zA-Z0-9:-]+)\s*=)
          pop: true
        - include: expressions

  tag-in-script:
    - match: (?i)\b(property)(?!\s+in\b)(\s+(any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid|[_$a-zA-Z][$\w]*))?\s+([_$a-zA-Z][$\w]*\b)(?!\s*=)
      captures:
        1: entity.name.tag.script.cfml
        3: storage.type.cfml
        4: string.unquoted.cfml meta.tag.property.name.cfml
      push:
        - meta_scope: meta.tag.script.cfml meta.tag.property.cfml
        - match: (?=;)
          pop: true
        - match: (?={)
          set: block-scope
        - include: scope:embedding.cfml#tag-generic-attribute
    - match: (?i)\b(property)(?!\s+in\b)(?=(\s+[a-zA-Z]|\s*[{;]|\s*$))
      captures:
        1: entity.name.tag.script.cfml
      push:
        - meta_scope: meta.tag.script.cfml meta.tag.property.cfml
        - match: (?=;)
          pop: true
        - match: (?={)
          set: block-scope
        - match: (?i)\b(name)\s*(=)\s*(?:((")([^<>"']*)("))|((')([^<>"']*)('))|([^<>"'\s]*))
          captures:
            1: entity.other.attribute-name.cfml
            2: punctuation.separator.key-value.cfml
            3: string.quoted.double.cfml
            4: punctuation.definition.string.begin.cfml
            5: meta.tag.property.name.cfml
            6: punctuation.definition.string.end.cfml
            7: string.quoted.single.cfml
            8: punctuation.definition.string.begin.cfml
            9: meta.tag.property.name.cfml
            10: punctuation.definition.string.end.cfml
            11: string.unquoted.cfml meta.tag.property.name.cfml
        - include: scope:embedding.cfml#tag-generic-attribute
    - match: (?i)\b(param)(?!\s+in\b)(?=\s+(name|default|max|maxLength|min|pattern|type)\s*=)
      captures:
        1: entity.name.tag.script.cfml
      push: tag-generic-attribute-script
    - match: (?i)\b(param)(?!\s+in\b)\s+([_$a-zA-Z][$\w\.]*)(?=\s+(name|default|max|maxLength|min|pattern|type))
      captures:
        1: entity.name.tag.script.cfml
        2: string.unquoted.cfml
      push: tag-generic-attribute-script
    - match: (?i)\b(param)(?!\s+in\b)(\s+([_$a-zA-Z][$\w]*))?\s+([_$a-zA-Z][$\w\.]*\b)
      captures:
        1: entity.name.tag.script.cfml
        3: storage.type.cfml
        4: string.unquoted.cfml
      push: tag-generic-attribute-script
    - match: (?i)\b(param)(?!\s+in\b)(?=(\s+[a-zA-Z]|\s*[{;]|\s*$))
      captures:
        1: entity.name.tag.script.cfml
      push: tag-generic-attribute-script
    - match: (\b)(?i:(abort))(?!\s+in\b)(?=(\s+[a-zA-Z]|\s*;|\s*$))
      captures:
        2: entity.name.tag.script.cfml
      push: tag-generic-attribute-script
    - match: |-
        (?x)
            (\b)
            (?i:
              (ajaximport|ajaxproxy|applet|application|argument|associate|break|cache|calendar
              |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo
              |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar
              |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask
              |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn
              |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image
              |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout
              |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart
              |map|mapitem|mediaplayer|menu|menuitem|messagebox|module|ntauthenticate|oauth|object
              |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop
              |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult
              |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule
              |search|select|setting|sharepoint|silent|slider|spreadsheet|sprydataset|storedproc
              |table|textarea|textinput|thread|throw|timer|tooltip|trace|transaction|tree|treeitem|try
              |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)
            )(?=\s+[a-zA-Z0-9:-]+\s*([=;{]|$)|\s*({|$))
      captures:
        2: entity.name.tag.script.cfml
      push: tag-generic-attribute-script

  tag-in-script-cf:
    - match: |-
        (?x)(?i)
          (cf
          (?:ajaximport|ajaxproxy|applet|application|argument|associate|break|cache|calendar
          |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo
          |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar
          |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask
          |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn
          |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image
          |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout
          |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart
          |map|mapitem|mediaplayer|menu|menuitem|messagebox|module|ntauthenticate|oauth|object
          |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop
          |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult
          |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule
          |search|select|setting|sharepoint|silent|slider|spreadsheet|sprydataset|storedproc
          |table|textarea|textinput|thread|throw|timer|tooltip|trace|transaction|tree|treeitem|try
          |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)
        )\(
      captures:
        1: entity.name.tag.script.cfml
      push:
        - meta_scope: meta.tag.script.cf.cfml
        - match: \)
          pop: true
        - match: '\b([a-zA-Z0-9:-]+)\b'
          captures:
            1: entity.other.attribute-name.cfml
        - match: =
          scope: punctuation.separator.key-value.cfml
          push:
            - match: (?=\))
              pop: true
            - match: (?=\s*\b([a-zA-Z0-9:-]+)\s*=)
              pop: true
            - include: expressions

  support-call:
    - match: (?i)\b(createobject)(?=\((?:\s*type\s*=)?\s*[\"']component[\"']\s*,)
      captures:
        1: support.function.cfml
      set:
        - meta_scope: meta.function-call.support.cfml meta.function-call.support.createcomponent.cfml
        - include: support-call-params
    - match: (?i)\b(createobject)(?=\((?:\s*type\s*=)?\s*[\"']java[\"']\s*,)
      captures:
        1: support.function.cfml
      set:
        - meta_scope: meta.function-call.support.cfml meta.function-call.support.createjavaobject.cfml
        - include: support-call-params
    - match: (?i)\b(queryexecute)(?=\()
      captures:
        1: support.function.cfml
      set:
        - meta_scope: meta.function-call.support.cfml
        - include: queryexecute-params
    - match: |-
        (?x)\b
          (?i:
            (array(?:append|avg|clear|contains|containsnocase|delete|deleteat|deletenocase|each
            |every|filter|find|findall|findallnocase|findnocase|first|indexexists|insertat|isdefined
            |isempty|last|len|map|max|median|merge|mid|min|new|prepend|reduce|resize|reverse
            |set|slice|some|sort|sum|swap|tolist|tostruct)|cache(?:clear|count|delete|get|getall
            |getallids|getdefaultcachename|getmetadata|getproperties|getsession|idexists|keyexists
            |put|regionexists|regionnew|regionremove|remove|removeall|setproperties)|component(?:cacheclear
            |cachelist|info)|create(?:date|datetime|dynamicproxy|guid|object|odbcdate|odbcdatetime
            |odbctime|time|timespan|uniqueid|uuid)|date(?:add|compare|convert|diff|format|part
            |timeformat)|entity(?:delete|load|loadbyexample|loadbypk|merge|namearray|namelist
            |new|reload|save|toquery)|get(?:applicationmetadata|applicationsettings|authuser
            |basetagdata|basetaglist|basetemplatepath|builtinfunction|canonicalpath|classpath
            |clientvariableslist|componentmetadata|contextroot|cpuusage|currentcontext|currenttemplatepath
            |directoryfrompath|encoding|exception|filefrompath|fileinfo|freespace|functioncalledname
            |functiondata|functionkeywords|functionlist|gatewayhelper|httprequestdata|httptimestring
            |k2serverdoccount|k2serverdoccountlimit|locale|localedisplayname|localhostip|luceeid
            |memoryusage|metadata|metricdata|numericdate|pagecontext|printerinfo|printerlist
            |profilesections|profilestring|readableimageformats|safehtml|soaprequest|soaprequestheader
            |soapresponse|soapresponseheader|systemfreememory|systemtotalmemory|tagdata|taglist
            |tempdirectory|tempfile|templatepath|tickcount|timezone|timezoneinfo|token|totalspace
            |userroles|variable|vfsmetadata|writeableimageformats)|image(?:addborder|blur|clearrect
            |copy|createcaptcha|crop|drawarc|drawbeveledrect|drawcubiccurve|drawimage|drawline
            |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|drawtext
            |filter|filtercolormap|filtercurves|filterkernel|filterwarpgrid|flip|fonts|formats
            |getblob|getbufferedimage|getexifmetadata|getexiftag|getheight|getiptcmetadata|getiptctag
            |getmetadata|getwidth|grayscale|info|makecolortransparent|maketranslucent|negative
            |new|overlay|paste|read|readbase64|resize|rotate|rotatedrawingaxis|scaletofit|setantialiasing
            |setbackgroundcolor|setdrawingalpha|setdrawingcolor|setdrawingstroke|setdrawingtransparency
            |sharpen|shear|sheardrawingaxis|translate|translatedrawingaxis|write|writebase64
            |xordrawingmode)|is(?:array|binary|boolean|closure|customfunction|date|ddx|debugmode
            |defined|empty|fileobject|image|imagefile|instanceof|ipinrange|ipv6|json|leapyear
            |localhost|notmap|null|numeric|numericdate|object|pdffile|pdfobject|query|safehtml
            |simplevalue|soaprequest|spreadsheetfile|spreadsheetobject|struct|userinanyrole|userinrole
            |userloggedin|valid|validoauthaccesstoken|videofile|wddx|xml|xmlattribute|xmldoc
            |xmlelem|xmlnode|xmlroot|zipfile)|list(?:append|avg|changedelims|compact|contains
            |containsnocase|deleteat|each|every|filter|find|findnocase|first|getat|indexexists
            |insertat|itemtrim|last|len|map|prepend|qualify|reduce|removeduplicates|rest|setat
            |some|sort|toarray|trim|valuecount|valuecountnocase)|object(?:equals|load|save)|orm(?:clearsession
            |closeallsessions|closesession|evictcollection|evictentity|evictqueries|executequery
            |flush|flushall|getsession|getsessionfactory|index|indexpurge|reload|search|searchoffline)
            |query(?:addcolumn|addrow|columnarray|columncount|columndata|columnexists|columnlist
            |convertforgrid|currentrow|deletecolumn|deleterow|each|every|execute|filter|getcell
            |getrow|map|new|recordcount|reduce|rowdata|setcell|slice|some|sort)|replace(?:list
            |nocase)|spreadsheet(?:addautofilter|addcolumn|addfreezepane|addimage|addinfo|addpagebreaks
            |addrow|addrows|addsplitpane|createsheet|deletecolumn|deletecolumns|deleterow|deleterows
            |formatcell|formatcellrange|formatcolumn|formatcolumns|formatrow|formatrows|getcellcomment
            |getcellformula|getcellvalue|info|mergecells|new|read|readbinary|removesheet|setactivesheet
            |setactivesheetnumber|setcellcomment|setcellformula|setcellvalue|setcolumnwidth|setfooter
            |setheader|setrowheight|shiftcolumns|shiftrows|write)|store(?:addacl|getacl|getmetadata
            |setacl|setmetadata)|struct(?:append|clear|copy|count|delete|each|every|filter|find
            |findkey|findvalue|get|insert|isempty|keyarray|keyexists|keylist|keytranslate|map
            |new|reduce|some|sort|update)|to(?:base64|binary|numeric|script|string)|transaction(?:commit
            |rollback|setsavepoint)|url(?:decode|encode|encodedformat|sessionformat)|xml(?:childpos
            |elemnew|format|getnodetype|new|parse|search|transform|validate)|abs|acos|addsoaprequestheader
            |addsoapresponseheader|ajaxlink|ajaxonload|applicationstarttime|applicationstop|array
            |asc|asin|atn|beat|binarydecode|binaryencode|bitand|bitmaskclear|bitmaskread|bitmaskset
            |bitnot|bitor|bitshln|bitshrn|bitxor|booleanformat|callstackdump|callstackget|canonicalize
            |ceiling|cfusion_decrypt|cfusion_encrypt|charsetdecode|charsetencode|chr|cjustify
            |collectioneach|collectionevery|collectionfilter|collectionmap|collectionreduce|collectionsome
            |compare|comparenocase|compress|contractpath|cos|csrfgeneratetoken|csrfverifytoken
            |ctcacheclear|ctcachelist|datasourceflushmetacache|day|dayofweek|dayofweekasstring
            |dayofweekshortasstring|dayofyear|daysinmonth|daysinyear|de|decimalformat|decodeforhtml
            |decodefromurl|decrementvalue|decrypt|decryptbinary|deleteclientvariable|deserialize
            |deserializejson|deserializexml|directorycopy|directorycreate|directorydelete|directoryexists
            |directorylist|directoryrename|directorysize|dollarformat|dotnettocftype|duplicate
            |each|echo|empty|encodeforcss|encodefordn|encodeforhtml|encodeforhtmlattribute|encodeforjavascript
            |encodeforldap|encodeforurl|encodeforxml|encodeforxmlattribute|encodeforxpath|encrypt
            |encryptbinary|esapidecode|esapiencode|evaluate|exp|expandpath|extract|fileappend
            |fileclose|filecopy|filedelete|fileexists|filegetmimetype|fileiseof|filemove|fileopen
            |fileread|filereadbinary|filereadline|fileseek|filesetaccessmode|filesetattribute
            |filesetlastmodified|fileskipbytes|fileupload|fileuploadall|filewrite|filewriteline
            |find|findnocase|findoneof|firstdayofmonth|fix|floor|formatbasen|generatepbkdfkey
            |generatesecretkey|hash|hash40|hmac|hour|htmlcodeformat|htmleditformat|htmlparse
            |iif|incrementvalue|inputbasen|insert|int|invalidateoauthaccesstoken|invoke|javacast
            |jsstringformat|lcase|left|len|ljustify|location|log|log10|lscurrencyformat|lsdateformat
            |lsdatetimeformat|lsdayofweek|lseurocurrencyformat|lsiscurrency|lsisdate|lsisnumeric
            |lsnumberformat|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber
            |lstimeformat|lsweek|ltrim|max|metaphone|mid|millisecond|min|minute|month|monthasstring
            |monthshortasstring|newline|now|nowserver|nullvalue|numberformat|onapplicationend
            |onapplicationstart|onerror|onmissingmethod|onmissingtemplate|onrequest|onrequestend
            |onrequeststart|onsessionend|onsessionstart|pagepoolclear|pagepoollist|paragraphformat
            |parameterexists|parsedatetime|parsenumber|pi|precisionevaluate|preservesinglequotes
            |quarter|query|quotedvaluelist|rand|randomize|randrange|reescape|refind|refindnocase
            |releasecomobject|rematch|rematchnocase|removecachedquery|removechars|repeatstring
            |replace|rereplace|rereplacenocase|restdeleteapplication|restinitapplication|restsetresponse
            |reverse|right|rjustify|round|rtrim|second|sendgatewaymessage|serialize|serializejson
            |serializexml|sessiongetmetadata|sessioninvalidate|sessionrotate|sessionstarttime
            |setencoding|setlocale|setprofilestring|settimezone|setvariable|sgn|sin|sizeof|sleep
            |soundex|spanexcluding|spanincluding|sqr|sslcertificateinstall|sslcertificatelist
            |stringlen|stripcr|systemcacheclear|systemoutput|tan|threadjoin|threadterminate|throw
            |timeformat|trace|trim|truefalseformat|ucase|ucfirst|unserializejava|val|valuearray
            |valuelist|verifyclient|week|wrap|writebody|writedump|writelog|writeoutput|wsgetallchannels
            |wsgetsubscribers|wspublish|wssendmessage|year|yesnoformat)
          )(?=\()
      captures:
        1: support.function.cfml
      set:
        - meta_scope: meta.function-call.support.cfml
        - include: support-call-params

  support-method-call:
    - match: |-
        (?x)(?i:\b
              (add|addcolumn|addrow|append|avg|blur|cjustify|clear|clearrect|columnarray|columncount|columndata|columnexists
              |columnlist|compare|comparenocase|contains|containsnocase|copy|count|crop|currentrow|dateformat|day|dayofweek
              |dayofyear|daysinmonth|daysinyear|delete|deleteat|deletecolumn|deleterow|diff|drawarc|drawcubiccurve|drawline
              |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|each|every|filter|find|findall
              |findallnocase|findkey|findnocase|findoneof|findvalue|first|firstdayofmonth|flip|get|getbufferedimage|getcell
              |getheight|getrow|gettoken|getwidth|grayscale|hour|indexexists|info|insert|insertat|isdefined|isempty|keyarray
              |keyexists|keylist|keytranslate|last|lcase|left|len|listappend|listavg|listchangedelims|listcompact|listcontains
              |listcontainsnocase|listdeleteat|listeach|listevery|listfilter|listfind|listfindnocase|listfirst|listgetat
              |listindexexists|listinsertat|listitemtrim|listlast|listlen|listmap|listprepend|listqualify|listreduce
              |listremoveduplicates|listrest|listsetat|listsome|listsort|listtoarray|listvaluecount|listvaluecountnocase
              |ljustify|lsdateformat|lsdayofweek|ltrim|map|max|median|merge|mid|min|minute|month|overlay|part|paste|prepend
              |quarter|recordcount|reduce|refind|refindnocase|rematch|rematchnocase|removechars|repeatstring|replace|replacenocase
              |rereplace|rereplacenocase|resize|reverse|right|rowdata|rtrim|scaletofit|second|set|setantialiasing|setcell
              |setdrawingstroke|sharpen|slice|some|sort|spanexcluding|spanincluding|stripcr|sum|swap|tolist|tostruct|translate
              |trim|ucase|update|week|wrap|writebase64|year)
            )\b(?=\()
      scope: support.function.member.cfml
      set:
        - meta_scope: meta.function-call.method.support.cfml
        - match: '\)'
          scope: meta.function-call.parameters.method.support.cfml punctuation.definition.group.end.cfml
          pop: true
        - match: '\('
          scope: punctuation.definition.group.begin.cfml
          push:
            - meta_scope: meta.function-call.parameters.method.support.cfml
            - match: '(?=\))'
              pop: true
            - match: ','
              scope: punctuation.separator.function-call.method.support.cfml
            - match: '\b({{identifier}})\s*(=)(?!=)'
              captures:
                1: entity.other.method-parameter.cfml
                2: keyword.operator.assignment.cfml
              push:
                - match: '(?=[,\)])'
                  pop: true
                - include: expressions
            - include: expressions

  support-call-params:
    - match: '\)'
      scope: meta.function-call.parameters.support.cfml punctuation.definition.group.end.cfml
      pop: true
    - match: '\('
      scope: punctuation.definition.group.begin.cfml
      push:
        - meta_scope: meta.function-call.parameters.support.cfml
        - match: '(?=\))'
          pop: true
        - match: ','
          scope: punctuation.separator.function-call.support.cfml
        - match: '\b({{identifier}})\s*(=)(?!=)'
          captures:
            1: entity.other.function-parameter.cfml
            2: keyword.operator.assignment.cfml
          push:
            - match: '(?=[,\)])'
              pop: true
            - include: expressions
        - include: expressions

  queryexecute-params:
    - match: '\)'
      scope: meta.function-call.parameters.support.cfml punctuation.definition.group.end.cfml
      pop: true
    - match: '\('
      scope: punctuation.definition.group.begin.cfml
      push:
        - meta_scope: meta.function-call.parameters.support.cfml
        - match: '(?=[,\)])'
          set: queryexecute-final-params
        - include: queryexecute-parameter
        - include: sql-string
        - include: expressions

  queryexecute-final-params:
    - meta_scope: meta.function-call.parameters.support.cfml
    - match: '(?=\))'
      pop: true
    - match: ','
      scope: punctuation.separator.function-call.support.cfml
    - include: queryexecute-parameter
    - include: expressions

  queryexecute-parameter:
    - match: '\b(sql)\s*(=)(?!=)'
      captures:
        1: entity.other.function-parameter.cfml
        2: keyword.operator.assignment.cfml
      push:
        - match: '(?=[,\)])'
          pop: true
        - include: sql-string
        - include: expressions
    - match: '\b({{identifier}})\s*(=)(?!=)'
      captures:
        1: entity.other.function-parameter.cfml
        2: keyword.operator.assignment.cfml
      push:
        - match: '(?=[,\)])'
          pop: true
        - include: expressions

  sql-string:
    - match: '"'
      scope: string.quoted.double.cfml punctuation.definition.string.begin.cfml
      push:
        - meta_scope: meta.queryexecute.sql.cfml
        - match: '"'
          scope: string.quoted.double.cfml punctuation.definition.string.end.cfml
          pop: true
        - match: (?=.|\n)
          push: scope:source.sql
          with_prototype:
            - match: '""'
              scope: constant.character.escape.quote.cfml
            - match: (?=")
              pop: true
            - include: scope:embedding.cfml#hash-delimiters
    - match: "'"
      scope: string.quoted.single.cfml punctuation.definition.string.begin.cfml
      push:
        - meta_scope: meta.queryexecute.sql.cfml
        - match: "'"
          scope: string.quoted.single.cfml punctuation.definition.string.end.cfml
          pop: true
        - match: (?=.|\n)
          push: scope:source.sql
          with_prototype:
            - match: "''"
              scope: constant.character.escape.quote.cfml
            - match: (?=')
              pop: true
            - include: scope:embedding.cfml#hash-delimiters
